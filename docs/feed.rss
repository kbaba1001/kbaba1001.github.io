<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>ハッカーと漫画家</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>Clojure Family が色々ある話</title>
      <link>https://www.kbaba1001.com/posts/202412030751_clojure-family/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202412030751_clojure-family/</guid>
      <content:encoded>
        <![CDATA[<p>Clojure といえば JVM 上で動く Lisp のように紹介されることが多く、
        私もそういう言い方をすることも多いのだがこの言い方は正しくない。
        なぜなら JVM 以外で動く Clojure (あるいは Clojure っぽい言語も含む) が多々存在しているからだ。</p>
        <p>今日は Clojure Family とも言うべきこれらの方言について紹介する。</p>
        <h2>Clojure (JVMで動くやつ)</h2>
        <p>まずは一番良く使われている JVM 上で動く Clojure 。
        特筆されない場合 &quot;Clojure&quot; といえばこれのこと。</p>
        <ul>
        <li>Java の機能やエコシステムを活用したい場合はとてもよい</li>
        <li>とりあえず Clojure を使いたい場合はこれがおすすめ</li>
        </ul>
        <h2>ClojureScript (Alt JS の一種)</h2>
        <p>ビルドすると JavaScript になる Clojure 。
        おそらく JVM 版の次によく使われている。
        JVM 版と同じところが開発しているという安心感がある。</p>
        <p>ただ、ビルドツールが色々とあって、</p>
        <ul>
        <li><a href="https://clojurescript.org/guides/quick-start">deps.ednを使う方法</a></li>
        <li><a href="https://figwheel.org/">Figwheel</a></li>
        <li><a href="https://github.com/thheller/shadow-cljs">Shadow-cljs</a></li>
        </ul>
        <p>などのやり方がある。</p>
        <p>「deps.edn を使う方法」は公式サイトに乗っているやり方だが、これは npm ライブラリを素直に使えないというデメリットが有り、
        そのへんを解決するために後者の 2 つがある。</p>
        <p>Shadow-cljs が一番後発なので、今から新しく何かを作りたいなら、これがおすすめ。
        （あるいは後述の squint や cherry を使う）</p>
        <h2>ClojureCLR</h2>
        <p>こちらも Clojure 本家が作成しているもので、 ビルドすると Microsoft’s .Net Framework 環境で動く Clojure 。
        つまり C# で書かれた Clojure 実装。</p>
        <p>私は使ったことがなく、詳しくないので紹介する程度に留める。
        ゲームとかWindowsサーバーでClojureを使いたい人にはいいのかもしれない。</p>
        <h2>Babashka</h2>
        <p><a href="https://babashka.org/">Babashka</a> は GraalVM を用いて Clojure を native binary にビルドできるもの。</p>
        <p>JVM 版の Clojure を使うとどうしても実行時の起動に時間が掛かるが、 Babashka であればすぐに動くので
        スクリプトを Clojure で書きたい場合などに便利。</p>
        <p><a href="https://github.com/borkdude">Michiel Borkent</a> 氏の作品。彼は Babashka を始め後述の様々なツールを作っているすごい人。</p>
        <h2>Squint</h2>
        <p><a href="https://github.com/squint-cljs/squint">squint</a> は ClojureScript のコンパイラなのだが、 JavaScript の Built-in Data structures のみ使用しているため、いくつかの点で本来の ClojureScript とは異なる。</p>
        <ul>
        <li>ClojureScript では <code>[]</code> や <code>{}</code> は JavaScript のオブジェクトではなく immutable な ClojureScript ようにカスタムされたオブジェクトを返すが、 Squint では JavaScript の build-in の <code>Array</code> や <code>Object</code> を返す。</li>
        <li>Async/Await のサポート (ClojureScript では core.async などを使う必要があったが Squint では Promise が素直に使える)</li>
        <li>ClojureScript 用に開発されたライブラリなどがうまく動かない場合があるので、JS/TS用のライブラリを使うほうが無難</li>
        <li><a href="https://github.com/brandonstubbs/vite-plugin-squint">vite-plugin-squint</a> などを使うと Squint -&gt; JSX -&gt; JS の変換が楽</li>
        </ul>
        <p>Squint はないよりも気軽に CLJS （っぽい言語）が使えるのが魅力。
        私としてはかなり期待している。</p>
        <h2>Cherry</h2>
        <p><a href="https://github.com/squint-cljs/cherry">Cherry</a> は Squint よりもともとの ClojureScript への互換性を高めたもの。
        ClojureScript のライブラリを活用したい場合はこちらのほうが良さそう。</p>
        <h2>Jank</h2>
        <p><a href="https://jank-lang.org/">Jank</a> は Clojure を LLVM + JIT コンパイラで動くようにしたもの。
        C++との親和性が高いらしく、C/C++ っぽい領域のところを Clojure で書きたい場合には良さそう。
        どのくらいの事ができるのかをまだ私は把握しきれていないけど、将来性はあるように思うので期待。</p>
        <h2>その他</h2>
        <p>私は使ったことないけど他のClojure方言を紹介</p>
        <ul>
        <li><a href="https://github.com/Tensegritics/ClojureDart">ClojureDart</a></li>
        <li><a href="https://github.com/clojerl/clojerl">ClojureL</a>
        <ul>
        <li>Erlang 実装</li>
        </ul>
        </li>
        <li><a href="https://github.com/kanaka/mal">mal</a>
        <ul>
        <li>Clojure っぽい言語を実装することで言語実装について学ぶプロジェクト</li>
        </ul>
        </li>
        </ul>
        <h2>感想</h2>
        <p>Lisp は方言がたくさんある言語だけど、最近はもうClojure方言と呼ぶべき分野ができていて、
        やっぱりClojureの人気はすごいなぁと思ったりしました。
        Scheme方言なんかも結構たくさんあるみたいで調べてみると面白かったです。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 03 Dec 2024 07:51:05 GMT</pubDate>
    </item>
    <item>
      <title>渋谷でもくもく会に参加した</title>
      <link>https://www.kbaba1001.com/posts/202411030733_attended-shibuya-mokumoku/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202411030733_attended-shibuya-mokumoku/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202411030733/mokumoku.jpg" alt="渋谷でもくもく会"></p>
        <p><a href="https://connpass.com/event/334713/">渋谷でもくもく会</a> に参加してきた。</p>
        <p>こういうイベントに参加するのは久しぶりで楽しかった。</p>
        <h3>会の雰囲気</h3>
        <p>シェアオフィスでの開催だったので静かな空間で良かった。
        参加者も１０人くらいで適度におしゃべりしたりするのにちょうどいい感じ。</p>
        <p>もくもく会だが、作業したり喋ったりゆるい雰囲気で良かった。
        （ずっと黙っている会もあったりするが、自分好みではない）</p>
        <p>他の参加者は若手と中堅のエンジニアの方が半々くらいで、
        適度に会話が盛り上がって楽しかった。
        意外と女性の参加者も多かった。</p>
        <p>私は最近静岡に引きこもっているので、Tech系の話をするのは久々で
        自分がこういうおしゃべりに飢えていたことに気づいた。</p>
        <p>若手エンジニアの方たちの話は自分にとっては新鮮なところもあって、
        転職の話とかどのように技術を学んでいくかとか、話題が若くて良かった。</p>
        <h3>やっていたこと</h3>
        <p>最近 ChatGPT に AI と音声で会話できる機能がついたのだが、それと同じようなものを
        ローカルLLMを使って実現したい。次の流れで実現できると思っている。</p>
        <ul>
        <li>ユーザーの音声のテキスト化
        <ul>
        <li>ユーザーの音声をブラウザで取得</li>
        <li>音声データをStreamでサーバーにおくる</li>
        <li>サーバーでは音声データをWhisperで文字に変換する (ここもStream処理)</li>
        <li>文字データをフロント側にStreamで返却しつつ、DBにも保存する</li>
        </ul>
        </li>
        <li>テキストをローカルLLMにわたして返答をつくる
        <ul>
        <li>１００文字くらいの短い文章を作るように命令しておく</li>
        <li>インプットはStreamではなくまとめてテキストデータを入れる</li>
        <li>アウトプットをStream で受け取る</li>
        </ul>
        </li>
        <li>LLMの返答を音声データにする
        <ul>
        <li>LLMのアウトプットを Stream で受け取り、それを <a href="https://github.com/KoljaB/RealtimeTTS">RealtimeTTS</a> などを用いて Stream で音声データにする</li>
        <li>サーバーからフロントに音声データと文字データを Stream で送る</li>
        <li>フロントではサーバーからのレスポンスを Stream で受け取りつつ、音声を再生し、文字データを画面に表示する</li>
        </ul>
        </li>
        </ul>
        <p>もくもく会では、ブラウザ上で音声データを取得して ReadableStream でサーバーに送り、
        サーバー側でファイル化するという処理を作ることができた。</p>
        <p>実際には受け取ったバイナリをファイルにするんじゃなくて、そのまま <a href="https://github.com/ufal/whisper_streaming/blob/main/whisper_online_server.py">whisper_online_server.py</a> に渡してテキスト化したい。</p>
        <h3>結果</h3>
        <p>会場ではかなり集中して作業できてきちんとした進捗が出せてよかった。</p>
        <p>12:00 - 18:30 （わたしは 17:30 で帰ったけど）という長時間の会だったので、
        なかなか普段ここまでまとまった時間は取れないので、それだけでもありがたかった。</p>
        <h3>蛇足: わからないことをAIに聞くことに慣れた</h3>
        <p>会とは関係ないけど WebStream API をつかったコーディングは初めてで
        MDNのサンプルコードだけだとしんどいなぁと思っていたところ、
        ChatGPTにサンプルコードを提示させるとかなりいいコードがでてきて、
        なんかもうこれでいいじゃんとなった。
        こういう規格に沿ったものをつくるのはAIのほうが得意そうだ。</p>
        <p>バックエンドも Deno にしているので Web 標準の機能が使えてスッキリするが、
        これも資料が少ないので ChatGPT に聞いたほうが何かと早い。。。</p>
        <p>ChatGPTの作ったコードをとりあえず動かしてみて、問題があったらドキュメントを参考に修正するという感じ。</p>
        <p>すごい時代になったなぁ。。。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 03 Nov 2024 07:33:24 GMT</pubDate>
    </item>
    <item>
      <title>ここ数年について</title>
      <link>https://www.kbaba1001.com/posts/202410291201_recently-a-few-years/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202410291201_recently-a-few-years/</guid>
      <content:encoded>
        <![CDATA[<p>最近何やってるの？、をざっくりまとめる。</p>
        <h3>プログラミング、絵、その他</h3>
        <p>以前にもまして家にこもりがちで、相変わらずプログラムを書いている。
        絵もたまに書いている。</p>
        <p>なんか自分の中の行動としてこの２つで固めていこうという感じがしている。</p>
        <p>プログラミングは以前にもまして他の人に説明しづらくなってきた。
        Clojureも時々は書いていて、TypeScriptも渋々とはいえ使い慣れてしまったほどには書いている。
        TSに関してはGoよりは書きやすく、仕事で使うならこれでいいかなぁーという感じがある。
        一人で書くコードに関してはなるべくClojureを使いたいが、それも結構面倒くさくて結局TSで書いていることも多い。</p>
        <p>プログラミング以外のIT系のこととしては自宅サーバーを始めたり、ローカルLLMで遊んだりしている。
        自宅サーバーの話はこのブログでもたまに書いているけど、そろそろ docker compose で色々やるのが限界なので
        k8s でも導入しようかと思っている。
        年末年始に少し自宅サーバーのパーティションなども整理したいと思いつつ、どうなることやら。</p>
        <p>AIに関してはわくわく感より恐ろしさのほうが強くていまいち熱中しきれないでいる。
        将来的にプログラムを手で書くような時代は終わってしまうのかもしれないと思うと淋しい。
        ChatGPTなども使っているがやはりローカルで動かしたいのでローカルLLMの研究をすることが多い。</p>
        <h3>辞めることを覚えようとしている</h3>
        <p>気がつけば３５歳になっていた。気持ち的には２０台後半くらいから何も変わってないのだが、
        体は明らかに代謝・体力など落ちていて、以前ほど集中力も続かなくなった。</p>
        <p>何より、眠い。</p>
        <p>夜起きていられない。19時ごろには眠っていることが多い。
        で、朝は3, 4時頃起きている。</p>
        <p>そんなわけで、なるべくやりたいことを減らすように努力しようと家族会議で決まった。
        やりたいことを絞って、なるべくゆっくり暮らすように心がけたい。</p>
        <p>ちょっと今まで忙しくしすぎた。</p>
        <h3>生活のこと</h3>
        <h4>近所付き合い</h4>
        <p>静岡県三島市に引っ越して早くも３，４年くらい経っている。
        生活は落ち着いてきた。引っ越し当初はコロナ禍で近所付き合いもなかったが、
        最近は町内会の組長をやっている都合もあり、少しは近所の人とも関わるようになった。
        具体的にはお祭りでかき氷を売ったりとか。それなりに楽しくやっている。</p>
        <h4>外食と酒</h4>
        <p>東京で暮らしていた頃に比べると、明らかに外食が減っている。
        とくに外で酒を飲むと代行代が結構かかるので、もっぱら宅飲みになった。
        その酒も以前よりはかなり減っていて、月に２，３回程度。
        一度飲むと少し飲みすぎるきらいがあるけど、飲まないときは数ヶ月飲まないこともある。</p>
        <h4>SNS、友人関係</h4>
        <p>去年くらいに X (Twitter) や Instagram などあらかたアカウントを消してしまって、Facebookもほぼ見なくなった。
        なんかインターネットに疲れた。SNSをやる楽しさより、知らない人の怒りみたいなものに触れることが増えてなんか嫌になってしまった。
        炎上みたいなのも別に自分の生活には関係ないことが多いし、ニュースも陰鬱な話題が多いし。</p>
        <p>代わりにやっているインターネットと言えば、 Discord でエンジニアとか絵描きさんとかと話をさせてもらっている。
        Discord は変に拡散されたりしない安心感がある（とはいえ公共の場ではあるが）。</p>
        <p>あとは zenn.dev の新しい記事を時々見たりしている程度だが、新しい情報のキャッチアップは思ったより困ってない気がする。</p>
        <p>友人関係は２０代の知り合いは結婚したり引っ越したりでみな生活が変わってしまった感じがしていて、
        自分も人のことは言えず三島に引きこもっているわけで、時の流れを感じることが多く、やや淋しい。</p>
        <p>特にTech系の話題を気楽にできていた２０代の頃を思い起こすと、今はなんだかなぁという感じもする。
        自分の興味のあるTechの話がマイナーになりすぎたのもあるし、勉強会とか行かなくなったのもあるし。</p>
        <p>東京を離れて三島に来たことは本当に良かったと思っているが、
        コミュニティとの関わり方みたいなのはもう少しやり方を覚えたいなぁと思ったりしている。</p>
        <h3>古い人間関係が復活したり</h3>
        <p>一方で、この5年間で実家には２度帰った。一生帰るつもりがなかったことを考えればすごいことだと思うが、
        やはり実家の人間関係は自分にはしんどくてもう十分かなぁという気持ちもある。
        兄とはたまにLINEしている。２０代の頃は考えられなかったことなので成長だと思うことにする。</p>
        <p>しばらく前に、高校の時の知り合いにもあった。飲み会を開いてくれて楽しかった。
        同じIT業界にいるせいか、世間が狭いのか、全く関係ないところで知り合った共通の知人が数名いて不思議だった。</p>
        <p>シェアハウス仲間にも久々に会ったりした。
        東京にいる人にはやはり会いやすいけど、地方の人には合う機会は減るもののつながりはなんとか続いている。
        地方で会えるとなんか楽しい。三島にも来てもらえたらやっぱり嬉しいし。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 29 Oct 2024 12:01:11 GMT</pubDate>
    </item>
    <item>
      <title>近々やりたいこと2024年10月</title>
      <link>https://www.kbaba1001.com/posts/202410200712_what-I-will-do-from-2024-10/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202410200712_what-I-will-do-from-2024-10/</guid>
      <content:encoded>
        <![CDATA[<p>近々やりたいこと</p>
        <ul>
        <li>ClojureScript (Squint) 関係の動画
        <ul>
        <li>プログラミングしながら雑談するような、プログラミング Vlog 動画を作りたい</li>
        </ul>
        </li>
        <li>Ollama か llama-cpp-python をベースにしてローカル AI と日本語で音声通話できる仕組みを作りたい
        <ul>
        <li>喋った言葉を whisper でテキスト化してローカルllm に認識させて、その結果を VOICEVOX で読み上げさせる</li>
        <li>Ollama は JS 対応されているのでうまいことクライアント作れば良さそう
        <ul>
        <li>とりあえず Web ベースのクライアントで良い</li>
        <li>コードも理解させるなら VS Code プラグインが理想かもしれない</li>
        </ul>
        </li>
        <li>以前から作っているローカルAI: Poppins システムの発展型</li>
        </ul>
        </li>
        <li>Supabase (Self-host) + Deno Fresh + Squint でシステム構築
        <ul>
        <li>以前から作っている FAM システムの作り直し</li>
        <li>ロードバランサ (Kong か Caddy あたり) をうまく使って拡張できるようにしたい</li>
        <li>今まで特定のサービスに依存しないシステム開発を心がけてきたけど、次の理由でSupabase依存することにした
        <ul>
        <li>PGroonga が動くクラウドシステムは Supabase のみ</li>
        <li>Supabase が self-host できるので必ずしもクラウド依存ではない</li>
        <li>Supabase 使うほうが認証とかストレージとか楽そう</li>
        </ul>
        </li>
        <li>Deno Fresh について
        <ul>
        <li>React より Preact のほうが好み</li>
        <li>Preact 前提なら vite で頑張るより Fresh 使うほうが楽かも</li>
        <li>サーバーサイドが Supabase 前提で簡略化出来るなら backend と frontend を分けなくても良さそう</li>
        </ul>
        </li>
        <li>Squint について
        <ul>
        <li>Squint で js, jsx を出力してそれを Deno Fresh で動かせれば理想</li>
        <li>もちろん Squint 使わないほうが一般的だし楽だけども、やはり Clojure を書きたい</li>
        </ul>
        </li>
        </ul>
        </li>
        <li>技術書典 (11/3) 参加予定
        <ul>
        <li>自宅サーバー本が出ます</li>
        <li>ローカル AI 本も出るかも？間に合えば…</li>
        </ul>
        </li>
        <li>ISUCON
        <ul>
        <li>参加申込済みだけどいまいち練習できていない。やらねば。。。</li>
        </ul>
        </li>
        <li>Rust の勉強
        <ul>
        <li>ISUCON 終了後に着手できそう</li>
        <li>本を3冊買ってあるので勉強したい</li>
        <li>特に WASM とか Web 対応とかが気になる</li>
        </ul>
        </li>
        <li>自宅サーバーに関する動画作成
        <ul>
        <li>自宅サーバー + NextCloud の話をもう少ししたい</li>
        <li>自宅サーバー + Local LLM の話もしたい</li>
        </ul>
        </li>
        </ul>
        <hr>
        <p>上記の箇条書きを ChatGPT 4o with canvas で文章化しました。↓</p>
        <hr>
        <p>やりたいことがたくさんあってワクワクしているので、近々取り組みたいプロジェクトについてまとめてみました。</p>
        <h3>ClojureScript (Squint) 関連の動画</h3>
        <p>ClojureScriptの一環として、特に&quot;Squint&quot;に関係するプログラミングのVlog動画を作りたいと思っています。プログラミングをしながら雑談をするような形式で、リラックスした雰囲気の動画になる予定です。技術的な内容と日常的な思考を共有することで、視聴者の皆さんと同じ熱意を共有できると嬉しいです。</p>
        <h3>ローカルAIと日本語で音声通話する仕組み</h3>
        <p>次に取り組みたいのが、Ollamaやllama-cpp-pythonをベースにして、ローカルAIと日本語で音声通話できる仕組みの開発です。これは、話した言葉をWhisperでテキスト化し、その内容をローカルのLLM（大規模言語モデル）に理解させ、その結果をVOICEVOXで読み上げる、という流れを想定しています。特にOllamaはJavaScript対応されているので、Webベースのクライアントを作ってテストしてみたいと思っています。最終的にはVS Codeプラグインとして、コードも理解する形に進化させるのが理想です。このアイデアは以前から作っているローカルAI、&quot;Poppinsシステム&quot;の発展型と考えています。</p>
        <h3>Supabase + Deno Fresh + Squint でシステム構築</h3>
        <p>次に、Supabase（Self-host）とDeno Fresh、そしてSquintを使って新たなシステム構築に取り組もうと思っています。このプロジェクトは、以前から作っているFAMシステムの改良版です。ロードバランサ（KongやCaddyなど）を使って、より拡張性のあるシステムにすることが目標です。</p>
        <p>これまで私は、特定のサービスに依存しないシステム開発を心がけてきましたが、以下の理由でSupabaseを選びました。</p>
        <ul>
        <li>PGroongaが動作するクラウドシステムはSupabaseのみ</li>
        <li>Supabaseはセルフホスト可能で、必ずしもクラウドに依存しない</li>
        <li>認証やストレージなどが簡単に利用できる</li>
        </ul>
        <p>Deno Freshを使う理由としては、Reactよりも軽量なPreactが好みであり、Preact前提ならFreshのほうがシンプルに開発できそうだからです。また、バックエンドとフロントエンドを分ける必要もないため、全体の開発が楽になると考えています。</p>
        <p>Squintについては、JavaScriptやJSXを生成してDeno Freshで動かすことを目指しています。もちろんSquintを使わないほうが一般的ではありますが、それでもClojureを書く楽しさを手放したくない気持ちがあります。</p>
        <h3>技術書典への参加</h3>
        <p>11月3日に開催される技術書典に参加する予定です。そこで、自宅サーバーに関する本を出す予定です。さらに、ローカルAIに関する本も間に合えば出したいと考えています。</p>
        <h3>ISUCONの参加</h3>
        <p>ISUCONに申し込んでいますが、まだあまり練習できていません。本番に向けてもう少し頑張って準備しなければと感じています。</p>
        <h3>Rustの勉強</h3>
        <p>ISUCONが終わったら、Rustの勉強にも取り組みたいと思っています。すでに3冊の本を購入しているので、これらを活用して特にWASMやWeb関連の技術に注目しながら学んでいく予定です。</p>
        <h3>自宅サーバーに関する動画作成</h3>
        <p>最後に、自宅サーバーに関する動画も作成したいと考えています。特に、自宅サーバーとNextCloudの設定や、自宅サーバーとローカルLLMの連携についてもう少し掘り下げて共有したいです。</p>
        <p>こうしてみると、たくさんのプロジェクトがありますが、どれも非常に楽しみで取り組むのが待ち遠しいです。少しずつ進めて、ブログや動画で進捗を共有していければと思っています。</p>
        <p>《kbaba1001|/img/horse.jpg|普通に読める文章になっていて恐ろしい...》</p>
        <hr>
        <p>ちなみに、同じプロンプトで llama3-elyza-jp-8b を実行した結果は次:</p>
        <hr>
        <p>タイトル: 近々やりたいことのまとめ - プログラミングとローカルAIの活用 -</p>
        <p>近いうちに取り組みたいプロジェクトや活動について、箇条書きで整理してみました。以下はその内容です。</p>
        <p>先日、技術書典11/3に参加し、自宅サーバー本を出します。同時に、ローカルAI本も出る予定です。他にも、ISUCONやRustの勉強、ClojureScriptやOllamaを活用したローカルAIと音声通話、SupabaseやDeno Freshを使用したシステム構築など多くのプロジェクトが控えています。</p>
        <p>以下は、各プロジェクトの詳細です。</p>
        <ol>
        <li>
        <p>ClojureScript関係の動画:
        プログラミングしながら雑談するVlog動画を作りたい。Ollamaやllama-cpp-pythonを使用し、ローカルAIと日本語で音声通話できる仕組みを構築します。</p>
        </li>
        <li>
        <p>Ollamaやllama-cpp-pythonのクライアント作成:
        Webベースのクライアントを作る予定です。VS Codeプラグインが理想かもしれません。</p>
        </li>
        <li>
        <p>Supabase、Deno Fresh、Squintでのシステム構築:
        以前から作っているFAM システムをSupabaseで再構築します。ロードバランサを使って拡張できるようにし、認証やストレージを楽に設定したいです。</p>
        </li>
        <li>
        <p>Deno Freshについて:
        Preactを使用してFreshでアプリケーションを作成する予定です。サーバー側の設定が簡略化されるならば、backendとfrontendを分ける必要はなさそうです。</p>
        </li>
        <li>
        <p>Squintについて:
        Squintでjs,jsxを出力し、Deno Freshで動かすことが理想です。もちろん一般的にはClojureScriptを使わないほうが楽ですが、書きたいから使います。</p>
        </li>
        <li>
        <p>技術書典11/3の参加と自宅サーバー本の出版:
        自宅サーバー本を出します。ローカルAI本も出る予定です。</p>
        </li>
        <li>
        <p>ISUCONの参加申し込みとRustの勉強:
        ISUCONに参加申込済みですが、練習できていません。やらねばです。Rustの勉強は、ISUCON終了後から始める予定です。</p>
        </li>
        <li>
        <p>自宅サーバーに関する動画作成:
        自宅サーバーとNextCloudやローカルLLMについての話をまとめたいです。</p>
        </li>
        </ol>
        <p>以上が近々やりたいことの内容です。</p>
        <p>《kbaba1001|/img/horse.jpg|要約してくれた感じだね》</p>
        <p>やはり llama2 系に比べれば圧倒的に進歩しているけど、 ChatGPT 4o にはもちろん及ばず。
        でもこれくらい動けばなにかできそうではある。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 20 Oct 2024 07:12:38 GMT</pubDate>
    </item>
    <item>
      <title>Squint で切り開く ClojureScript の新しい可能性</title>
      <link>https://www.kbaba1001.com/posts/202410130849_opening-up-new-possibilities-for-clojure-script-with-squint/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202410130849_opening-up-new-possibilities-for-clojure-script-with-squint/</guid>
      <content:encoded>
        <![CDATA[<p>少し前から <a href="https://github.com/squint-cljs/squint">Squint</a> という軽量な ClojureScript (CLJS) のコンパイラがあります。
        最近これで遊び始めたのでざっくり紹介したいです。</p>
        <p>《kbaba1001|/img/horse.jpg|TypeScriptと同程度の気楽さでClojureScriptを使いたい》</p>
        <p>簡単に言えばこれを叶えるための選択肢としての Squint です。</p>
        <h3>そもそも今までの CLJS と何が違うのか</h3>
        <p>今までの CLJS はこんな感じでした。</p>
        <ul>
        <li>Java の Clojure との高い互換性を重視</li>
        <li>CLJS の実行に Java が必要 (<a href="https://github.com/thheller/shadow-cljs">shadow-cljs</a>はだいぶ頑張ってこれをなくそうとしていたけど…)</li>
        <li>ビルドのアウトプットファイルが大きい
        <ul>
        <li>JS のデータ構造をそのまま使うわけではないので標準で色々入っている分重い</li>
        </ul>
        </li>
        <li>JS のデータ構造を使う場合には <code>#js</code> や <code>clj-&gt;js</code> などを使って変換する必要があった
        <ul>
        <li>これで困ることはあんまりなかったけど、初心者には分かりづらいポイントかも</li>
        </ul>
        </li>
        <li>Promise の扱いが微妙
        <ul>
        <li><a href="https://github.com/clojure/core.async">core.async</a> で十分なことは多いけど、 JS の Promise を使いたいケースも結構ある</li>
        <li>core.async の関数の戻り値が Promise ではないのがたまに辛い</li>
        </ul>
        </li>
        <li>package.json とかに書いたらいい感じにやってほしいけど、なんかごちゃごちゃする
        <ul>
        <li>shadow-cljs はだいぶ良かった</li>
        </ul>
        </li>
        <li>cljs 対応済みの clojure ライブラリが使える</li>
        </ul>
        <p>何度も言いますが Shadow-cljs は最高です。 npm で動くし、今までの ClojureScript のライブラリも使えます。
        難点を上げるとすれば、ビルドが遅くて重く、なんとなく気楽さに欠けることでしょうか。</p>
        <p>Vite などの JS 文化のビルドライブラリを使いたいというのが正直なところです。</p>
        <p>そこで、 Squint 。</p>
        <p>Squint は今までの Clojure(Script) との互換性を捨てる代わりに、</p>
        <ul>
        <li>JS のデータをそのまま使うことによるアウトプットの軽量化</li>
        <li>Promise, Async/Await のサポート</li>
        <li>JSX 対応</li>
        </ul>
        <p>などが入り、 vite などと組み合わせて使うことも出来るようになりました。</p>
        <p>なので</p>
        <p>《kbaba1001|/img/horse.jpg|今までの cljs は不要だけど、 js の資産を活用して cljs で開発したい》</p>
        <p>のような考えの人には向いていると思います。
        詳細は <a href="https://github.com/squint-cljs/squint?tab=readme-ov-file#differences-with-clojurescript">このへん</a> を読んでください。
        今までの CLJS との互換性を重視した <a href="https://github.com/squint-cljs/cherry">cherry</a> というプロジェクトもあります。</p>
        <h3>まずはサンプルコード</h3>
        <p><a href="https://github.com/neumann-tokyo/vite-preact-squint">vite-preact-squint</a></p>
        <p>vite, preact, squint で土台を作ってみた。まだ途中だけどとりあえず squint でビルドした jsx を vite で動かすところまではできた。</p>
        <p>vite squit plugin みたいなやつがあればよいのだが、そこまではまだできていないようで、
        <code>squint watch</code> で js/jsx ファイルを作ってそれを <code>vite</code> に食べさせるという動き。</p>
        <p>そうすると２つのプロセスを同時に起動する必要があり、やや面倒なので <a href="https://github.com/chrismytton/shoreman">Shoreman</a> という <a href="https://github.com/ddollar/foreman">Foreman</a> を shell に移植したやつをリポジトリ内に入れて使うことにした。
        (この辺はもう少しシンプルにできそうな気がするけど)</p>
        <p><a href="https://github.com/brandonstubbs/vite-plugin-squint">vite-plugin-squint</a> を作っている人もいたので、後で試す。</p>
        <h3>cljs で malli だけ使いたい</h3>
        <p><a href="https://github.com/metosin/malli">malli</a> は cljs で動的に typecheck が出来るライブラリで、
        <a href="https://github.com/clojure/spec.alpha">clojure/spec.alpha</a> の代わりによく使われている。</p>
        <p>malli の良いところはデータ構造で spec を定義できて、かつ、 Validation などでも使えることだ。</p>
        <p>TypeScriptのような型システムは別にいらないのだが、単に関数の引数として何を期待しているのかを
        明白にしておきたいときは結構あって、 Malli はそういうときにちょうどいい。</p>
        <h4>Squint で Malli は動かない。ではどうするか？</h4>
        <p>先ほど互換性の話をした通り Squint では普通の CLJS ライブラリは動かないので Malli も動かない。</p>
        <p>ではどうするか？ JS のライブラリで似たようなものを探すしかない。</p>
        <p>「引数に何を期待しているかを明記する」という目的であれば <a href="https://www.npmjs.com/package/prop-types">PropTypes</a> をまず思いついた。</p>
        <p>しかし、案の定 PropTypes は放置されていて、世の中的にはそういうのは「 TypeScript を使え」の一点張りになってしまっていた。
        PropTypes的なライブラリで代替品も見つからない。</p>
        <p>《kbaba1001|/img/horse.jpg|発想を変えよう》</p>
        <h4>Validation ライブラリを Spec 代わりに使う</h4>
        <p>Clojure には <code>pre</code>、 <code>post</code> という機能がある。
        関数の事前条件(<code>pre</code>)または事後条件(<code>post</code>)を設定して、条件を満たしていなければ例外を出すというものだ。</p>
        <p>Malli にせよ clojure/spec.alpha にせよ、静的な型チェックとは異なり、
        動的な型チェックというのは何かしらの方法で実行して確認する必要がある。</p>
        <p>方針としてはこうだ。</p>
        <ul>
        <li><code>pre</code> で validation チェックライブラリ ( <a href="https://zod.dev/">zod</a> や <a href="https://valibot.dev/">valibot</a> など ) を実行して引数のチェックをする</li>
        <li>この機構は本番モード(<code>NODE_ENV=production</code>)では無視する（必ずパスする）ようにする</li>
        <li>テストを活用する</li>
        </ul>
        <p>このやり方なら JS の新しいライブラリを使って Malli が行っているような動的な型チェックが出来る。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 13 Oct 2024 08:49:58 GMT</pubDate>
    </item>
    <item>
      <title>CADをやり始めた</title>
      <link>https://www.kbaba1001.com/posts/202409280830_i-challenge-a-cad/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280830_i-challenge-a-cad/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://cadiy3d.com/wp/"><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D.png" alt="caDIY3D"></a></p>
        <p><a href="https://cadiy3d.com/wp/">caDIY3D</a> というソフトで CAD を始めてみることにした。</p>
        <p>自分でも意外なことに今まで CAD をやったことがない。
        DIY の設計図は斜視図で紙や iPad で書くことでなんとかしてきていた。</p>
        <p>だが、いい加減 CAD を覚えようと思った。
        世の中には CAD のソフトが有料・無料あわせてたくさんあるのだが、
        caDIY3D が次の点で良さそうだと思って試している。</p>
        <ul>
        <li>価格が安い (買い切りで1万円くらい)</li>
        <li>DIY に特化した機能がある
        <ul>
        <li>ホームセンターで売っているような材料で設計できる</li>
        </ul>
        </li>
        <li>設計を元に木取り図を自動生成してくれる
        <ul>
        <li>木取り図とは、作ろうとしているものに対してどの材料をどのくらい買えばいいかという図</li>
        <li>基本的にホームセンターで売っているものは 3～8フィートくらいなので、その範囲で材を切る必要がある</li>
        </ul>
        </li>
        <li>機能が限られている分、直感的な 3D の UI で設計可能</li>
        </ul>
        <p>たぶん 3D プリンターなどを使うのであれば <a href="https://www.autodesk.com/products/fusion-360/overview?term=1-YEAR&amp;tab=subscription">Fusion 360</a> のような大掛かりな CAD ソフトを使うほうがいいと思うけど、木工に関しては caDIY3D が良さそうだ。</p>
        <p>とりあえず 30 日トライアルをやっている。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-2.png" alt="caDIY3D-2"></p>
        <p>30分くらい使っただけで簡単な棚を設計できた。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-3.png" alt="caDIY3D-3"></p>
        <p>木取り図も自動生成できて最高。毎回これを頭で考えるのが若干大変だった。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-4.png" alt="caDIY3D-4"></p>
        <p>木取り図から値段も計算してくれる。便利じゃん！</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 08:30:16 GMT</pubDate>
    </item>
    <item>
      <title>紙に書いた今年の日記が500ページくらいあってキモい</title>
      <link>https://www.kbaba1001.com/posts/202409280809_paper-diary/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280809_paper-diary/</guid>
      <content:encoded>
        <![CDATA[<p>皆さんは日記帳を持ってますか？</p>
        <p>私の日記帳はこんな感じです。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280809/diary2.jpg" alt="日記2"></p>
        <p><a href="https://www.kokuyo-st.co.jp/stationery/campus-notebinder/">コクヨ ノートのように使えるバインダー</a> に
        <a href="https://www.kokuyo-st.co.jp/stationery/looseleaf/b5.html">しっかり書けるA罫7mmドット入りルーズリーフ</a> を入れて、
        <a href="https://www.pentel.co.jp/products/ballpointpen/energel/">エナージェル</a>ボールペンやガラスペンで日記を書くのが好きだ。</p>
        <p>SNS をやめてから日記を1日２，３回くらい書くようになった。
        ネットに書けないことも紙には書けるし、炎上しないから気が楽だ。</p>
        <p>特に読み返すわけでもないのだが、書いた分は別の厚めのルーズリーフケースに移し替えている。</p>
        <p>で、その結果、今年の日記がこんな感じ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280809/diary1.jpg" alt="日記1"></p>
        <p>分厚くてキモい。。。</p>
        <p>しかもだいたいどのページもぎっちり書いてある。</p>
        <p>読み返してみると、なんか常に色々やっててこの人忙しそうだなと思った。</p>
        <p>別に普通のことなんだけど「今日は通院の日だ」みたいな記述もあって、少し狂気じみている。</p>
        <p>最近では日記を売る人もいると聞いたことある。
        守秘義務に関わることや個人名とか除けば自分の日記も売れそうではある。。。
        あんまそういう気持ちじゃないけど</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 08:09:11 GMT</pubDate>
    </item>
    <item>
      <title>AIコンピュータについて</title>
      <link>https://www.kbaba1001.com/posts/202409280755_ai-computer/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280755_ai-computer/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.contec.com/-/media/Contec/jp/news/2024/24091000/img_01.jpg" alt="DX-M2300"></p>
        <p><a href="https://www.contec.com/jp/news/2024/2024091000/">DX-M2300</a> という組み込み用のパソコンがあるらしい。
        組み込み用というのはようするに Raspberry Pi みたいなやつの超すごいやつということらしい。
        ロボットの制御なんかに使えるみたいなんだけど、 Jetson AGX Orin 64GB という CPU/GPU を搭載していて、
        VRAM 64GB ということなのでかなり処理性能が高い。</p>
        <p>最近のローカルLLM、例えば llama などでも 70B くらいのがあるわけだが、こういうのを動かす環境が結局
        H100 みたいな超高級(500万円くらい) なマシンしかないという状況は結構きつくて、
        DX-M2300 シリーズはオープン価格だがだいたい 40 万～ 100 万くらいのはずで、
        比較的手が出しやすい。</p>
        <p>むりにファンレスである必要はないと思うのだが（というかこのでかいヒートシンクつけるくらいならファンつけてくれたほうが。。。）、
        たぶんそこはロボットとして音を出したくないみたいな需要があるのだろう。
        たしかにドラえもんからファンの音がしていたら嫌だ。</p>
        <p>ただいまいちこのマシンの購入方法がわからない。
        代理店に問い合わせてくれとのことなのだが、１台だけの発注を受け入れているのかどうか。。。</p>
        <p>RTXシリーズがなかなか5000系がでなくて Nvidia がもう個人向けの GPU に興味なさそうな気がするので、
        Jetson シリーズにはちょっと期待している。</p>
        <p>とにかく VRAM が大きい GPU がそれなりの値段で欲しい。。。</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 07:55:55 GMT</pubDate>
    </item>
    <item>
      <title>Web UIデザインの勉強をしている</title>
      <link>https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202409100908/ui-design.jpg" alt="UI Design Books"></p>
        <p>前から持っていた本も含めて上記の本を読んでいる。</p>
        <p>色彩検定３級は前から持っているのだが、内容を忘れてしまったので復習している。
        ちょっと概念過ぎて応用までが遠い気もする。</p>
        <h3>なぜ勉強しているのか</h3>
        <p>《kbaba1001|/img/horse.jpg|デザインのできるエンジニアになりたい》</p>
        <p>以前から画面を作る機会は多く、デザイナーを雇う予算がない開発の現場も多いので、
        私が自分でワイヤーフレームなど書くことも多々あり、デザインを勉強したいという気持ちは以前からあった。
        というか、以前からデザインは勉強しているのだが、いまいち正解がわからず自らをデザイナーと名乗るほど
        習得できている気がしない。</p>
        <p>ある意味で、デザインは機能を作ることより独学が難しいかもしれない。
        機能は動いているかどうかという明白は指標があるけど、デザインにはそれがない。
        素人でも口を出せる部分もある一方で、専門家らしい意見が求められる場合も多いように思う。
        結局のところ、なぜそのデザインにしたのかを自分なりに一つ一つ正解を作っていく分野という気がする。</p>
        <p>一方で、単に「デザイン」という場合、出版物（チラシとか本とか）のデザインを指す場合が多いように思う。
        私にとってそういうデザインも同人誌づくりでは必要なのだが、本職であるWebシステム開発で活かすのであれば、
        やはりWebデザインについて学びたい。
        印刷物は後から動いたり画面の大きさが変わったりしないので、どうしてもWebやスマホに応用が不十分なことがあるので、
        今回は Web UI デザインに焦点を絞っている本を買ってみた（下の２冊）。</p>
        <h3>感想『縁の下のUIデザイン』</h3>
        <p>かつてWeb+DB Press で連載していたものが本になったらしい。
        Web+DB Press は廃刊になってしまったのが未だに惜しい。。。</p>
        <p>内容としては UI の小技集だがどういう意図でそのUIを使えばいいかを
        比較しながら説明してくれているのでわかりやすかった。</p>
        <p>またどのようなUIが楽しいか、という観点でもUIを考えており、
        単に利便性の話だけでなくユーザーにとって楽しいと思えるシステムを
        提供できているかというのは指標として今後も大切にしたいと思った。</p>
        <p>私のような非デザイナーにはありがたい。</p>
        <p>エンジニアがデザインを学ぶ場合、ほとんどのデザイナーよりも実装力は高い場合が多いのではなかろうか。
        どのように HTML や CSS, JS を使えばその機能を実装できるかはエンジニアの方が詳しいはずだ。
        しかし、なぜその UI にするのかという部分でエンジニアはデザイナーに劣る。</p>
        <h3>感想『UIデザイン必携』</h3>
        <p>『縁の下のUIデザイン』と色彩検定３級の中間くらいの知識をちょうど補ってくれる感じで良かった。</p>
        <p>色彩検定３級で出てくる用語、概念を、じゃあWebデザインでどのように考えるかという部分が
        イマイチ自分の中で整理できていなかったのだが、この本はそのへんをうまく説明してくれている気がする。</p>
        <p>『縁の下のUIデザイン』ほど実装に特化しておらず、でもWebやスマホを中心としたUIの話が
        まとまっており良い感じだ。</p>
        <p>この本１冊での満足感はそこまで高くないかもしれないけど、最初の写真にある４冊全て含めると
        デザインについての学習はかなりできると思う。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 10 Sep 2024 09:08:37 GMT</pubDate>
    </item>
    <item>
      <title>React の Tips やおすすめライブラリなど</title>
      <link>https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</guid>
      <content:encoded>
        <![CDATA[<p>React も使い始めて数年が経ち、自分なりの書き方も確立できてきたので Tips などをまとめてみようと思う。</p>
        <h3>React If</h3>
        <p><a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。大事なことなのでもう一度。
        <a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。</p>
        <p>簡単に言えば、 if 文や Switch 文を React コンポーネントで書ける。</p>
        <pre><code class="language-javascript">const Bar = ({ name, age, drinkingAge }) =&gt; (
        &lt;div&gt;
        &lt;Header /&gt;
        &lt;If condition={age &gt;= drinkingAge}&gt;
        &lt;Then&gt;
        &lt;span className=&quot;ok&quot;&gt;Have a beer, {name}!&lt;/span&gt;
        &lt;/Then&gt;
        &lt;Else&gt;
        &lt;span className=&quot;not-ok&quot;&gt;Sorry, {name}, you are not old enough.&lt;/span&gt;
        &lt;/Else&gt;
        &lt;/If&gt;
        &lt;Footer /&gt;
        &lt;/div&gt;
        );
        </code></pre>
        <p>React の読みづらさの一つが三項演算子だと思っていて、コンポーネントで書いたほうが読みやすい。
        Solidjs にこんな感じの機能があって似たようなことが React でもできないかと思って探したら React If を見つけたという経緯。</p>
        <h3>react-timer-hook</h3>
        <p>アニメーションなど時間を扱いたいケースが時々あって、
        そういう場合に <a href="https://www.npmjs.com/package/react-timer-hook?activeTab=readme">react-timer-hook</a> が
        非常に使いやすかった。</p>
        <p><code>useTimer</code> という hook を作って時間を扱うことができる。便利。</p>
        <h3>そもそも SPA でよくね？</h3>
        <p>Next.js や Remix などの SSR 系のライブラリが流行っているが、ほとんどのケースでは SPA で十分だと思う。
        SSR はサーバーサイドも一緒に管理することになり、まだまだ気楽に書けるという印象ではない。</p>
        <p>特に別途 BFF っぽい API サーバーがあるのであれば、 SPA で十分ではないかというのは検討したほうがいい。
        SSR は開発コストが高く、それを考慮しても SSR でしかパフォーマンスが出せないという場合にのみ使う方が良い。</p>
        <h3>Wouter</h3>
        <p>React または Preact において軽量なルーティングライブラリとして使えるのが <a href="https://github.com/molefrog/wouter">Wouter</a> 。</p>
        <p>SPAならこれで十分。余分な機能がない。以上。</p>
        <h3>jotai</h3>
        <p><a href="https://jotai.org/">jotai</a> は結構有名なライブラリになってしまったが、グローバルステートなどを扱うための状態管理ライブラリ。
        いわゆる <code>useContext</code> の代替。</p>
        <p>いろいろなプラグインがあって、目的に合わせて変えられるのが良い。
        私が特に気に入っているのは</p>
        <ul>
        <li><a href="https://jotai.org/docs/extensions/effect">jotai-effect</a>
        <ul>
        <li>useEffect 的なやつ</li>
        </ul>
        </li>
        <li><a href="https://jotai.org/docs/extensions/scope">jotai-scope</a>
        <ul>
        <li>jotai の atom はグローバル変数にならざるを得ないので、スコープを付けられるライブラリ</li>
        </ul>
        </li>
        </ul>
        <h3>spacetime</h3>
        <p>React とは無関係だがよく使うので <a href="https://github.com/spencermountain/spacetime">spacetime</a> も紹介する。</p>
        <p>いわゆる date-fns のような時間操作系のライブラリ。</p>
        <p>軽量、直感的な関数、機能が豊富なので気に入っている。知名度が低いのが残念だ。</p>
        <h3>ky</h3>
        <p><a href="https://www.npmjs.com/package/ky">ky</a> は <a href="https://www.npmjs.com/package/axios">axios</a> の代替ライブラリ。</p>
        <p>Denoでも使えるのが良い。</p>
        <p>正直この手のやつはあまり使う必要がない（fetchで十分）と思うのだが、たまにあると便利なので一応使っている。</p>
        <h3>Tanstack Query</h3>
        <p><a href="https://tanstack.com/query/latest">Tanstack Query</a> も有名なやつだが、 SPA 開発ではほぼ必須のライブラリ。</p>
        <p>API 通信をキャッシュしたり、データ取得中の loading status を管理したりできる超便利なやつ。</p>
        <p>リロード機能がいい感じなのが最高。</p>
        <p><a href="https://jotai.org/docs/extensions/query">jotai-tanstack-query</a> も結構頑張って使っていたのだが、
        ちょっともう一歩なところがあって結局 Tansatack Query をそのまま使うほうがよいという結論になった。</p>
        <h3>qs</h3>
        <p><a href="https://www.npmjs.com/package/qs">qs</a> もあまり React は関係ないが URL の Search Parameters をいい感じに encode/decode できるやつ。</p>
        <p>ルーティングライブラリにこの手の機能がくっついている場合もあるけど、 qs のほうが小回りがきいて便利なことが多いので、
        ルーティングは前述の Wouter くらいシンプルにしておいて qs で補うほうが好みだ。</p>
        <h3>vitest, happy-dom</h3>
        <ul>
        <li><a href="https://vitest.dev/">vitest</a></li>
        <li><a href="https://github.com/capricorn86/happy-dom">happy-dom</a></li>
        </ul>
        <p>テストライブラリ。</p>
        <p>速い。書き心地に変なクセがない。以上</p>
        <h3>Biome</h3>
        <p><a href="https://biomejs.dev/">Biome</a> は Linter と Formatter の機能を併せ持つ爆速なやつ。</p>
        <p>Biome に比べれば ESLint や Prettier は遅くて使いたくない。</p>
        <p>Biome のデフォルトのフォーマットにやや癖があるが、自分としては Linter や Formatter というのは
        「あればそれでいい」という程度のこだわりしかなく特に不満なし。</p>
        <p>色々カスタマイズしたい人は ESLint のほうがいいと思う。</p>
        <p>残念なのは対応している言語が基本的に JS/TS/JSX/TSX/JSON/JSONC のみということ。
        Markdown や CSS も対応してくれると嬉しいのだが。。。</p>
        <p>少なくとも React + Chakra UI の世界にいる限り生 CSS は書かなくてもいいので Biome で十分である。</p>
        <h3>lefthook</h3>
        <p>git hook をかきやすくするやつ。</p>
        <p>チーム開発のときに Linter / Formatter / Test あたりは必ずパスしてからコミットしてほしいという気持ちがあり、
        そういう設定を強要するために lefthook など入れてみるのだが、まぁ、だいたい抜け道を使われて徒労に終わる。。。</p>
        <h2>UI の話</h2>
        <h3>Chakra UI</h3>
        <p>最近は UI 作りは <a href="https://v2.chakra-ui.com/">Chakra UI</a> 1択と思っている。
        <a href="https://www.kuma-ui.com/">Kuma UI</a> も思想は悪くないのだが、コンポーネントが少なすぎる。</p>
        <p>Chakra UI にはだいたい使いたいコンポーネントが揃っているし、思想的にも使いやすい。</p>
        <p>Tailwind css の良いところを取り込みつつ、悪いところは排除した感じが実に良い。</p>
        <h4>ローディング UI を考える</h4>
        <p>Chakra UI にあるローディングで使えそうなコンポーネントが次。</p>
        <ul>
        <li><a href="https://v2.chakra-ui.com/docs/components/progress#animated-progress">Progress bar</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/progress-bar.gif" alt="progress-bar"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/skeleton">skeleton</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/skeleton.gif" alt="skeleton"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/spinner">spinner</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/spinner.gif" alt="spinner"></li>
        </ul>
        </li>
        </ul>
        <p>最近良く見かける UI としてロード中に Progress bar がヘッダーとかページのトップにあるやつ。
        なんとなくロード中というのがわかりやすいので導入したい。</p>
        <p>Skeleton も私としてはあまり使ってこなかったのだが、Amazonとか見てるとかなり使われている。
        ロード中なんだけど早く画面が表示されたように錯覚させる良いUIだと思う。</p>
        <p>逆に Spinner はいかにも「ロード中ですよ」という感じで、案外多用しないほうがいい気がする。
        本当にロードに時間がかかるような場合とかのみにしたほうがいいんじゃないかなぁ。</p>
        <p>こういうのは本職のデザイナーの意見も聞きたいところ。</p>
        <p><strong>(追記)</strong></p>
        <p><a href="https://www.npmjs.com/package/holy-loader">holy-loader</a> という便利なライブラリを見つけた。
        導入するだけで画面遷移の時ヘッダーにローディングUIを表示することができる。良さそう。</p>
        <h4>Chakra UI にないコンポーネントを補う</h4>
        <p>少々意外なことに Chakra UI には date-picker や select2 的なコンポーネントがない。
        正直これらは <code>&lt;input type=&quot;datetime-local&quot; &gt;</code> や <code>&lt;datalist&gt;</code> で十分なケースも多いのだが、
        もう少し機能のある UI が求められるケースもある。</p>
        <p>そういう場合には <a href="https://blueprintjs.com/">Blueprint</a> を使うようにしている。</p>
        <h3>Blueprint</h3>
        <p><a href="https://blueprintjs.com/">Blueprint</a> は業務アプリをつくるのに向いたUIを提供している。
        デザイン的に Chakra UI のポップな感じと合わないのだが、ちょうど Chakra にないコンポーネントがあるので使っている。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409091131/blueprint.png" alt="blueprint"></p>
        <h4>テーブルUIを考える</h4>
        <p>Blueprint の良い点はテーブルUIが非常によくできている。
        ドキュメントが読みづらくGitHubのサンプルコードを読むのが一番良いのだが、Excelライクなテーブルが作れる。</p>
        <p>未だに「ExcelみたいなUIが欲しいです」という要望は時々あるので Blueprint はよい。</p>
        <p><a href="https://tanstack.com/table/latest">Tanstack Table</a> と組み合わせると更に良い。
        これはテーブルのUIとデータを分けて考えることができるようになるライブラリ。
        地味に困る部分なのでしっかり作ってあって良いライブラリだと思う。
        ソートやページネーションもあるので助かる。</p>
        <h3>AutoAnimate</h3>
        <p><a href="https://auto-animate.formkit.com/">AutoAnimate</a> は一覧とかで自動的にそれっぽいアニメーションを付けてくれるライブラリ。
        一覧画面での追加、削除、移動のとき要素にちょっとアニメーションを付けてくれる。
        あんまこだわりなくそれっぽいアニメーションがほしいときにCSSとかで頑張るより楽。</p>
        <p>何度か使っているけど、 Chakra UI にも <a href="https://v2.chakra-ui.com/docs/components/transitions">Transitions</a> という
        アニメーション関係のコンポーネントがあることに気がついたのでこっちでも十分かもしれない。</p>
        <h3>その他、過去に紹介した UI ライブラリ</h3>
        <ul>
        <li><a href="https://www.kbaba1001.com/posts/202408290945_dnd-on-list">タスクリストみたいなやつを楽にDnDするやつ</a></li>
        <li><a href="https://www.kbaba1001.com/posts/202408290953_full-calendar/">カレンダーUIが必要な時使うやつ</a></li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Mon, 09 Sep 2024 11:31:14 GMT</pubDate>
    </item>
  </channel>
</rss>