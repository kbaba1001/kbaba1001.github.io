<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>kbaba1001 ブログ</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>TOEFLを受けることにした</title>
      <link>https://www.kbaba1001.com/posts/202403130629_toelf/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202403130629_toelf/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202403130629/toefl_books.jpg" alt="TOEFL books"></p>
        <p>書店で上記の３冊を買ってみた。
        とりあえず語彙力を強化してその後リーディング、リスニングを鍛える。</p>
        <p>ライティング・スピーキングも必要なのだが、この辺は本というより添削サービスとか使うほうが良さそう。</p>
        <p>文法は
        <a href="https://www.toshin.com/books/archives/2013/06/post_210.html">１億人の英文法</a>
        とかでおさらいする予定。</p>
        <p>学術的なことをやろうと思ったら TOEIC とか英検より TOEFL
        のほうが良さそうという事がわかってきた。 その次が IELTS という感じだが、
        こっちは日本でマイナーすぎてあんま試験されてなくて田舎ぐらしにはちょっと辛い。</p>
        <p>TOEFL の英語はやはり単語が難しく、語彙力がないと話にならない感じだった。
        久々に自作の単語帳アプリ
        <a href="https://word-penne-lp.neumann.tokyo/index-jp.html">Word Penne</a>
        を使って暗記をすることにした。</p>
        <p>Word Penne も作り直したいのだがその時間はなさそう。。。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 13 Mar 2024 06:29:09 GMT</pubDate>
    </item>
    <item>
      <title>英語勉強の再開</title>
      <link>https://www.kbaba1001.com/posts/202403080807_relearning-english/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202403080807_relearning-english/</guid>
      <content:encoded>
        <![CDATA[<p>英語を勉強し直そうと思っている。主に TOEFL 対策のために。</p>
        <p>今までの英語の勉強方法は</p>
        <ul>
        <li>英語日記を書く</li>
        <li>添削してもらう</li>
        <li>日記に書いたことを元にして英会話</li>
        </ul>
        <p>という流れで結構上達してきたので、この流れを基本にしたい。</p>
        <p>最近は <a href="https://eikaiwa.dmm.com/app/daily-news">DMM 英会話の教材</a>
        を読んでリーディングの勉強をしている。
        （DMM英会話は教材だけなら無料でアカウントもなしで読める）</p>
        <p>TOEFL 対策可能なオンライン英会話（でそこそこ安いところ）を探している。
        今のところの候補は次</p>
        <ul>
        <li><a href="https://sptr.jp/">スパトレ</a></li>
        <li><a href="https://englishlive.ef.com/ja-jp/">English Live</a></li>
        <li><a href="https://www.cambly.com/english?lang=ja">Cambly</a></li>
        </ul>
        <p>こういうのってたくさんあるから無料レッスンを複数受けるだけでも英語の勉強になるのよね…。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 08 Mar 2024 08:07:22 GMT</pubDate>
    </item>
    <item>
      <title>今後の勉強科目について</title>
      <link>https://www.kbaba1001.com/posts/202403060942_study-subjects/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202403060942_study-subjects/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202403060943/books.jpg" alt="books"></p>
        <p>家の中にあった本で今後勉強しようと思っているものを積み上げてみた。</p>
        <p>基本的に勉強しようと思っている科目は次。</p>
        <ul>
        <li>英語 (TOEFL)</li>
        <li>大学の数学 (全体的に復習)</li>
        <li>コンピュータ科学 (復習。知識のならし)</li>
        <li>医療の基礎</li>
        </ul>
        <p>英語は会話と英検をメインでやってたけど、今後アカデミックな方向に行きたいという気持ちが多少あるので
        TOEFL を受けることにした。 大学院などで TOEFL
        の成績表を出すことを求められることもあるらしいので。</p>
        <p>数学は前から復習したいと思っていたのでやる。</p>
        <p>コンピュータ科学は流石にだいたいわかるが、細かいところの知識をならしたいので１冊読んでおくことにする。
        普段使う Web 関係以外は忘れているところもあるような気もする。</p>
        <p>医療関係の本。興味本位もあるし以前仕事で少し関わっていたこともあるのでその復習を兼ねて。</p>
        <p>その他、歴史とか古文とかなんとなく文化系の勉強もしていて、この辺は完全に趣味になりそうだけどやっておいて損はないかなぁという感じ。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 06 Mar 2024 09:42:41 GMT</pubDate>
    </item>
    <item>
      <title>Deno.testを諦めてmochaを入れた</title>
      <link>https://www.kbaba1001.com/posts/202403041204_give-up-deno-test/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202403041204_give-up-deno-test/</guid>
      <content:encoded>
        <![CDATA[<p>BDD という概念にうんざりしている（たぶんそういう人多いと思うけど）。 RSpec
        で散々やってきた BDD という概念は今となっては何だったのかと思うほどだ。</p>
        <p>それはともかく。</p>
        <p>最近 Deno で本格的な Web システムを作ろうとしているのだが、
        ドキュメントが少ないこともあり結構小さなことで躓くことが多い</p>
        <p>テストもその一つ。</p>
        <p>そもそも
        <a href="https://docs.deno.com/runtime/manual/basics/testing/">Denoにはデフォルトでテストランナーがついている</a>。
        最近は Node
        にもテストランナーが搭載されているし、デフォルトで事足りるならそれがいい。</p>
        <p>しかし、結果的にはちょっとバグがあってだめだった。</p>
        <pre><code class="language-javascript">Deno.test(&quot;database&quot;, async (t) =&gt; {
        const client = new Client({
        user: &quot;user&quot;,
        database: &quot;test&quot;,
        hostname: &quot;localhost&quot;,
        port: 5432,
        });
        await client.connect();
        
        await t.step(&quot;insert user&quot;, async () =&gt; {
        const users = await client.queryObject &lt; User &gt;
        (&quot;INSERT INTO users (name) VALUES ('Deno') RETURNING *&quot;);
        assertEquals(users.rows.length, 1);
        assertEquals(users.rows[0].name, &quot;Deno&quot;);
        });
        });
        </code></pre>
        <p>こういう <code>t.step</code> で <code>async/await</code> をするようなコードを書くとうまく動かない。</p>
        <p><a href="https://github.com/denoland/deno/issues/15425">https://github.com/denoland/deno/issues/15425</a> によると Windows
        の問題かもしれない。 Docker 使っているんだけどなぁ。</p>
        <p>まぁこれだけなら <code>t.step</code> を使わなければいいだけなのだが、 <code>afterAll</code>
        的なことをしたくてこの辺の機能もちょっといまいちうまく動いてくれなかった。</p>
        <p>この辺は新しい機能のようなのでいったん使うのを諦めて、
        <a href="https://mochajs.org/">Mocha</a> を使うことにした。</p>
        <p>なぜ Mocha にしたかというと、</p>
        <ul>
        <li>サーバーのテストなのでなるべくシンプルにしたい</li>
        <li>近頃万能感がある vitest は軽く試した感じ Deno でうまく動かなかったので不採用</li>
        <li>記法的には <a href="https://github.com/avajs/ava">ava</a>
        も良さそうだったけど、軽く試した感じ Deno で（省略</li>
        <li>Jest でもいい気がするけど先に Mocha でうまく動いたので試してない</li>
        </ul>
        <p>Mocha を使ったことがなかったので知らなかったけどこれは BDD 的な構成と Runner
        を提供するだけで Assert はないようなので、 Assert は普通に Deno
        の標準のものを使うことにした。</p>
        <h3>補足: DB アクセス</h3>
        <p><a href="https://kysely.dev/">Kysely</a> を使っている。
        多少ちゃんと動くようになるまで時間がかかったけどなんとかなった。
        テストの場合、全てのテストケースが終わった後で明示的に <code>await db.destroy();</code>
        を呼んでやる必要があった。 こっちの話もそのうち書くかも。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 04 Mar 2024 12:04:55 GMT</pubDate>
    </item>
    <item>
      <title>変わった形のメガネを買った</title>
      <link>https://www.kbaba1001.com/posts/2024022503_glasses/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022503_glasses/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/2024022503/glasses.jpg" alt="メガネ"></p>
        <p>六角形がベンゼンみたいで可愛いなと思ったので購入。
        こういう眼鏡って変な印象になりがちだけど、案外自分の顔だとおしゃれな範囲で済んだ気がする。</p>
        <p>今度の誕生日で免許更新なので、少し度を強めにしておいた。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 25 Feb 2024 18:00:00 GMT</pubDate>
    </item>
    <item>
      <title>ローカル LLM を自宅サーバーで動かして Chatbot を作る</title>
      <link>https://www.kbaba1001.com/posts/2024022501_llama-chatbot/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022501_llama-chatbot/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>今までローカル LLM を色々と試してきたわけだが、ついに集大成として Chatbot
        を作るに至った。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/2024022501/poppins1.png" alt="Poppins1"></p>
        <p>結局、結論としては、</p>
        <ul>
        <li>モデル:
        <a href="https://huggingface.co/elyza/ELYZA-japanese-Llama-2-13b-fast-instruct">elyza/ELYZA-japanese-Llama-2-13b-fast-instruct</a>
        を使う
        <ul>
        <li>正確には GGUF がほしいので
        <a href="https://huggingface.co/mmnga/ELYZA-japanese-Llama-2-13b-fast-instruct-gguf">こちら</a>
        の <code>ELYZA-japanese-Llama-2-13b-fast-instruct-q4_K_S.gguf</code> を使うことにした</li>
        </ul>
        </li>
        <li>サーバー: <a href="https://github.com/abetlen/llama-cpp-python">llama-cpp-python</a> を
        docker で動かす。
        <ul>
        <li><a href="https://github.com/jasonacox/TinyLLM/tree/main/llmserver">TinyLLM</a>
        をめちゃくちゃ参考にした</li>
        <li><a href="https://github.com/vllm-project/vllm">vLLM</a> は設定が悪いのか GPU
        メモリエラーになるのでひとまず諦めた</li>
        </ul>
        </li>
        <li>クライアント: <a href="https://nlux.dev/">nlux</a> というのが React で動くチャットボットの
        UI をすぐに作れるので採用した</li>
        </ul>
        <h2>動かしてみる</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024022501/poppins2.png" alt="Poppins2"></p>
        <p>そこそこまともに回答してくれる。</p>
        <h2>ソースコードサンプル</h2>
        <p>そのうち作る。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 25 Feb 2024 14:15:00 GMT</pubDate>
    </item>
    <item>
      <title>frp で自宅サーバーを公開する</title>
      <link>https://www.kbaba1001.com/posts/2024022301_frp/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022301_frp/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p><a href="https://ngrok.com/">ngrok</a>
        は素晴らしいサービスなのだが本番用の固定ドメインを使おうとするとドメイン毎に毎月
        $15 かかるので何個も作っているとそれなりの出費になるので代替方法として
        <a href="https://github.com/fatedier/frp">frp</a> を使ってみることにした。</p>
        <p>frp は ngrok みたいなトンネリングを自分でやるためのライブラリだ。</p>
        <h2>概要</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024022401/frp.png" alt="frp"></p>
        <p>frp にはサーバー用の frps とクライアント用の frpc がある。 frps
        はグローバルIPから安定してアクセスできる場所に置く必要がある。つまり ngrok
        の場合はこの部分をサービスとしてやっているということになる。</p>
        <p>frps のあるサーバーでは 443 ポートなど使いたいポートについては Firewall
        を開けておく必要があるが frpc を置く方のサーバー（つまり自宅サーバーなど）では
        Firewall を設定する必要はなく、 frpc の設定だけやってあれば良い。</p>
        <p>今回やりたいことは２つ</p>
        <ul>
        <li>自宅サーバーにインターネット越しに SSH でログインする</li>
        <li>自宅サーバーからホームページをインターネットに公開する</li>
        </ul>
        <h2>frps の設定</h2>
        <p>以前安かったときに契約した ConoHa のサーバーがあるのでこれを frps
        用に使うことにした。 固定IP が使えて frps
        の実行ファイルが動かせればなんでもいい気がするので、 Cloud Run とか Faas
        とかでもいけるかもしれない。</p>
        <p>frps.toml を次のように設定する。</p>
        <pre><code>bindPort = 7000
        vhostHTTPSPort = 443
        </code></pre>
        <p>次で起動</p>
        <pre><code>./frps -c frps.toml
        </code></pre>
        <p>ポート 7000, 2222, 443 を使うので開けておく。 (Linux の Firewall は最近は ufw
        を使っている。簡単なので便利。)</p>
        <h2>frpc の設定: SSH</h2>
        <p>次に自宅サーバーで次のような設定をしておく。</p>
        <p><code>frpc.toml</code></p>
        <pre><code>serverAddr = &quot;xxx.xxx.xxx.xxx&quot; # ConoHa サーバーのグローバル IP アドレス or 左記を割り当てたドメイン
        serverPort = 7000
        
        [[proxies]]
        name = &quot;ssh&quot;
        type = &quot;tcp&quot;
        localIP = &quot;127.0.0.1&quot;
        localPort = 22
        remotePort = 2222
        </code></pre>
        <p>で、次で起動</p>
        <pre><code>./frpc -c frpc.toml
        </code></pre>
        <p>上記の設定の場合、自宅サーバーでポート 22 で SSH 接続できるようにしておいて、
        frps 経由では 2222 ポートでアクセスできるように設定してある。</p>
        <p>手元のマシンの SSH
        設定を次のようにすればインターネットのどこからでも自宅サーバーにアクセスできる。</p>
        <p><code>~/.ssh/config</code></p>
        <pre><code>host my-server
        HostName xxx.xxx.xxx.xxx
        User alice
        Port 2222
        ForwardAgent yes
        </code></pre>
        <p>User とか IdentityFile の設定とかは適当にやっておく。</p>
        <h2>frpc の設定: https サーバー</h2>
        <p>インターネットにサイトを公開するのであれば HTTPS で公開したい。 frp には
        https2http というプラグインがあってこれを使うと http で動いているローカルの
        アプリケーションサーバーに対して https で公開できるようになる。</p>
        <h3>HTTPS の証明書ファイルの生成</h3>
        <p>今回は HTTPS 化のために <a href="https://letsencrypt.org/">Let's Encrypt</a> を使う。 Let's
        Encrypt は certbot という Linux コマンドで証明書ファイルを作ることができる。</p>
        <pre><code class="language-bash">certbot certonly --manual -d *.kbaba1001.com --preferred-challenges dns --config-dir ./letsencrypt/config --work-dir ./letsencrypt/work --logs-dir ./letsencrypt/logs
        </code></pre>
        <p>こんな感じで設定ファイルを作ることができる。（ディレクトリは予め作っておく）</p>
        <p>ドメインでのTXT設定が求められるのでそれは対応すること。</p>
        <p>上記の場合は <code>./letsencrypt/config/live/kbaba1001.com/cert.pem</code>
        などのような形で証明書ファイルができる。</p>
        <h3>frpc の設定</h3>
        <p>新しい frpc.toml を作って次のように設定する。</p>
        <pre><code>serverAddr = &quot;xxx.xxx.xxx.xxx&quot;
        serverPort = 7000
        vhostHTTPSPort = 443
        
        [[proxies]]
        name = &quot;tunnel_https2http&quot;
        type = &quot;https&quot;
        customDomains = [&quot;tunnel.kbaba1001.com&quot;]
        
        [proxies.plugin]
        type = &quot;https2http&quot;
        localAddr = &quot;127.0.0.1:8000&quot;
        crtPath = &quot;./letsencrypt/config/live/kbaba1001.com/cert.pem&quot;
        keyPath = &quot;./letsencrypt/config/live/kbaba1001.com/privkey.pem&quot;
        hostHeaderRewrite = &quot;127.0.0.1&quot;
        requestHeaders.set.x-from-where = &quot;frp&quot;
        </code></pre>
        <p><code>frpc -c frpc.toml</code> で起動しておいて、ブラウザから
        <code>https://tunnel.kbaba1001.com</code> にアクセスすれば 通信が Proxy
        されて自宅サーバーの localhost:8000 にリクエストが飛ぶようになる。</p>
        <h2>まとめ</h2>
        <p>frps
        を動かすサーバーが必要になるものの、お金をあまりかけずに自宅サーバーを公開するには良い方法だと思う。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 23 Feb 2024 23:30:00 GMT</pubDate>
    </item>
    <item>
      <title>最近買った本</title>
      <link>https://www.kbaba1001.com/posts/2024022301_books/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022301_books/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<h2>入門コンピュータ科学</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024022301/computer-book.jpg" alt=""></p>
        <p>妻がコンピュータの歴史や仕組みが知りたいというので買ってみた。
        パラパラめくってみた感じ、大学の情報工学科で習うようなことが
        一通り書いてある感じだった。</p>
        <p>基本情報処理技術者試験とか好きな人には良さそう。</p>
        <h2>オイラーの贈物、数学ガール</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024022301/ei-pi-book.jpg" alt=""></p>
        <p>オイラーの公式について復習したくて買ってみた。 複素平面っていいよね。
        想像上の数字に過ぎない複素数が現実世界に影響を与えているのが良い。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>掲示板を作り、既存のコメントシステムの廃止しました</title>
      <link>https://www.kbaba1001.com/posts/2024022103_bbs/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022103_bbs/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>前からリクエストが多かった<a href="https://github.com/kbaba1001/kbaba1001.github.io/discussions">掲示板機能</a>を作りました。</p>
        <p>リンク先を見れば分かる通り、 GitHub Discussions です。
        そういえばこんな機能できてたなぁと思ったので使えるようにしました。</p>
        <p>前々からマシュマロや google form でのコメントがいまいちだなぁと思っていたので、
        GitHub Discussions に気がついたのは良い考えだなと我ながら思います。
        なにせお金がかかりませんし、システムのメンテナンスの必要もありません。
        そもそもこのブログ自体も GitHub Pages で動いてますので相性抜群です。
        情報の集約にもなります。</p>
        <p>というわけで今までのマシュマロおよび google form でのコメント機能は廃止します。
        今後は上記の掲示板にメッセージを頂けたら幸いです。</p>
        <p>GitHub アカウントがない方はどうするか？ 作ってください。
        アカウントがなくても閲覧のみならできます。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 21 Feb 2024 16:15:00 GMT</pubDate>
    </item>
    <item>
      <title>github template repository を作りたい</title>
      <link>https://www.kbaba1001.com/posts/2024022102_github-template-repository/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024022102_github-template-repository/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>今更ながら
        <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-template-repository">github template repository</a>
        なるものを知った。
        リポジトリを作るときにテンプレートを選ぶと初期セットアップできるようだ。</p>
        <p>便利じゃん。。。</p>
        <p>今まで <a href="https://github.com/neumann-tokyo">ノイマントーキョーのリポジトリ</a> に
        <code>*-init</code> の名前で 初期セットアップリポジトリを作ってきていたのでこれらを
        template repository 化しようと思う。 正直、あんま使ってないのもあるけど。</p>
        <p>npm
        コマンドとかでテンプレート化しようと思っていたけど、ちょっと面倒くさいしなぁと思っていたので
        github template repository は良さそう。 npm パッケージとして公開しなくていいし、
        Clojure などの言語でも使えるし。 というか Clojure こそテンプレート必要では...。</p>
        <h2>共通化しておきたいもの</h2>
        <p>Webシステムを使うときに次のものはだいたい必要になるのでひと通り揃えておきたい。</p>
        <ul>
        <li>[サーバー側] データベースへのアクセスと SQL Builder 的なライブラリ</li>
        <li>[サーバー側] REST API (または RPC) 構築用のルーティングライブラリ</li>
        <li>[サーバー側] <a href="https://github.com/golang-migrate/migrate">migrate</a>
        によるデータベースのマイグレーション</li>
        <li>[サーバー側] データベースの seeds データの読み込みの仕組み</li>
        <li>[フロント側] React, jotai,
        <a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a>,
        ルーティング (<a href="https://github.com/molefrog/wouter">Wouter</a> か
        <a href="https://reactrouter.com/en/main">ReactRouter</a> かなぁ), Chakra UI</li>
        <li>[フロント側] REST Client (または RPC Client) のセットアップ</li>
        <li>formatter, linter, および git pre-commit で左記を自動実行するための仕組み
        (<a href="https://github.com/evilmartians/lefthook">lefthook</a> みたいなやつ)
        <ul>
        <li>最近だと <a href="https://biomejs.dev/">Biome</a> が気に入っているのだが Deno
        プロジェクトだったら標準の deno fmt とかでも良さそうなので悩みどころ</li>
        </ul>
        </li>
        <li><a href="https://code.visualstudio.com/docs/devcontainers/containers">devcontainer</a>
        による実行環境</li>
        <li>docker-compose によるデータベースなどのセットアップ</li>
        <li>テスト関係</li>
        <li>vite などのビルド系ツールのセットアップ</li>
        <li>基本的な機能
        <ul>
        <li>JWT を用いた email/password による認証機能</li>
        <li>認可機能</li>
        <li>上記の管理機能</li>
        </ul>
        </li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Wed, 21 Feb 2024 04:32:00 GMT</pubDate>
    </item>
  </channel>
</rss>