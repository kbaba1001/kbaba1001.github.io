<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>ハッカーと漫画家</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>ページネーションとタグ一覧対応</title>
      <link>https://www.kbaba1001.com/posts/202407220958_pagination-and-tag-index/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202407220958_pagination-and-tag-index/</guid>
      <content:encoded>
        <![CDATA[<p>記事の一覧をする各ページのページネーション対応とタグ一覧の自動生成対応をしました。</p>
        <p><a href="https://lume.land/">Lume</a> はこういう機能が色々あって便利だけど、相変わらずドキュメントが不親切なうえ結構仕様も変わるからどうやればいいのかよくわからん。。。</p>
        <p><code>index.page.js</code> みたいなファイルを作ると複数の page を生成するコードを書いてもいいという感じのようだ。
        これが昔は <code>index.impl.js</code> だったっぽくてそっちの情報しかなかったから結構うまく動かなかった。</p>
        <p>ただ、やり方が分かれば便利なもので、記事につけた tag を自動的に全部取ってきてヘッダーに表示することもできるようになった。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 22 Jul 2024 09:58:06 GMT</pubDate>
    </item>
    <item>
      <title>6,7月やってたことまとめ</title>
      <link>https://www.kbaba1001.com/posts/202407161937_june-and-july-activity/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202407161937_june-and-july-activity/</guid>
      <content:encoded>
        <![CDATA[<h3>私生活</h3>
        <ul>
        <li>ホームステイの受け入れをやっていた。もともと4週間の予定だったが少々トラブルがあって2週間で終了した。</li>
        <li>風邪をひいた。発熱や喉の痛みは１週間くらいで治ったものの、しつこく咳がでてかなり長いこと苦しんだ</li>
        <li><a href="https://www.yamakawa.co.jp/product/59116">日本史の英語版の教科書</a> を夫婦で一緒に毎日１ページずつ読んでいた</li>
        <li>仕事や私用で何度か東京に行った</li>
        <li>近所の床屋（理容院）が気に入ったので今後も通うことにした
        <ul>
        <li>床屋に必ず刃牙がおいてあるのはなぜなのか</li>
        </ul>
        </li>
        <li>7月の猛暑日に海に行った。誰もいなくて大変心地よかった</li>
        <li>高校時代の旧友が飲み会を主催してくれて参加。IT系の人が10人くらい集まったけど全くITの話はせず、くだらない話ばかりして最高だった</li>
        <li>逆流性食道炎と慢性胃炎が発覚して、食事や生活習慣の改善を始めた
        <ul>
        <li>逆流性食道炎に関しては最重症（重症より悪い）と言われ、これ以上悪化すると食堂に穴が空いたりガンになったりすると医者から脅されたので改善に取り組むことにした</li>
        </ul>
        </li>
        <li>新しい浴衣を1万円くらいでかった。いつも古着で買っているので新品を買うのは珍しい。</li>
        <li>CRAMP 展、グレンラガン対キルラキル展などいくつか展示を見た。どれも素晴らしい。</li>
        <li>Guilty Gear Strive を買ったので合間をぬって遊びたい所存</li>
        </ul>
        <p>《kbaba1001|/img/horse.jpg|逆流性食道炎きついわー。揚げ物や酒を辞めてコーヒーも1日1杯にしている》</p>
        <h3>Tech 系の話</h3>
        <ul>
        <li>体調不良や私生活でのストレスなどであまり個人開発や英語勉強などは進まず。。。残念</li>
        <li>YouTube を再開したい気持ちが若干あるが、正直時間が取れそうにない</li>
        </ul>
        <p>《kbaba1001|/img/horse.jpg|個人開発が止まっているのでなんとか再開したい。こういうのはモチベの管理が難しいね》</p>
        <h3>イラスト系の話</h3>
        <ul>
        <li><a href="https://note.com/bookcultureclub/n/n97a6fe0c4294">静岡 zine fess</a> に参加して漫画本を売った</li>
        <li><a href="https://holbein-shop.com/?pid=87594228">ホルベインの透明水彩絵の具２４色セット</a> を買って絵を描いていた
        <ul>
        <li>噂通り発色が良くて使い勝手が良い</li>
        <li>水彩色鉛筆とも併用して表現を模索中</li>
        </ul>
        </li>
        <li>20年ぶりくらいにつけペンを使うようになった
        <ul>
        <li>いろいろ試したけどスクールペンが一番良さそうという結論</li>
        </ul>
        </li>
        <li>水彩を始めたので画家の<a href="https://www.pixiv.net/users/902690">三澤寛志</a>さんの本を中古で買った。昔、彼の主催のコスプレクロッキー会に参加したことがあって楽しかった。
        <ul>
        <li>水彩や油彩で東方のイラストなど描いていてすごいと思う</li>
        </ul>
        </li>
        <li>YouTube で水彩の人の動画をいくつか見ている
        <ul>
        <li>最近のお気に入り
        <ul>
        <li><a href="https://www.youtube.com/@rojiasnote1494">ROJIAS NOTE</a></li>
        <li><a href="https://www.youtube.com/@WatercolorbyShibasaki">Watercolor by Shibasaki</a></li>
        <li><a href="https://www.youtube.com/@umeko0930">梅吉</a></li>
        </ul>
        </li>
        </ul>
        </li>
        <li><a href="https://www.comitia.co.jp/html/149.html">コミティア149</a> にサークル参加予定
        <ul>
        <li>詳細は後日書きます</li>
        <li><a href="https://neumann.base.shop/">ノイマンパブリッシング</a> で売っている「らんげ～じ！」の他にもう一冊出したい</li>
        </ul>
        </li>
        </ul>
        <p>《kbaba1001|/img/horse.jpg|絵を描く時間を減らさないと他のことができなさそう……》</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 16 Jul 2024 19:37:20 GMT</pubDate>
    </item>
    <item>
      <title>「関数型デザイン」を買った</title>
      <link>https://www.kbaba1001.com/posts/202406181152_bought-functional-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202406181152_bought-functional-design/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202406181152/functional-design.jpg" alt="関数型デザイン"></p>
        <p>ロバート・C・マーチンが Clojure と Java を比較して Clojure におけるデザインパターンや
        SOLID 原則の実装方法について書いた本らしい。</p>
        <p>まだ始めの方しか読んでないけど彼の本にしてはコードが多くて嬉しい。
        Clojure の再起と反復の違いについて書かれていて、
        再起のときにメモ化を活用することで末尾再帰最適化できないときでも
        パフォーマンスを出すコードの書き方があり、すでに勉強になっている。</p>
        <p>Clojure を使う人以外にこの本が刺さるかどうかわからないけど
        ニッチな分野に対しては良書だと思うのでしっかり読みたい。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 18 Jun 2024 11:52:38 GMT</pubDate>
    </item>
    <item>
      <title>「本に寄り添う文鎮」を買った</title>
      <link>https://www.kbaba1001.com/posts/202406171618_I-bought-a-paperweight/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202406171618_I-bought-a-paperweight/</guid>
      <content:encoded>
        <![CDATA[<h2>本に寄り添う文鎮</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/202406171618/paperweight1.jpg" alt="本に寄り添う文鎮1">
        <img src="https://www.kbaba1001.com/img/posts/202406171618/paperweight2.jpg" alt="本に寄り添う文鎮2"></p>
        <p>ヒゲのような形をした文鎮を買ってみた。</p>
        <p>実はこれ、ネットでは大人気で全く手に入らなかったのだが
        いつも行く文房具店で売っていたのですぐに購入した。</p>
        <p>本をちょっと開いた状態でキープしたいときに便利。
        普通の文鎮と違って滑ったりしないし。</p>
        <p>読書台も持っているのだが持ち運びが不便なのでこの文鎮は良さそう。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 17 Jun 2024 16:18:35 GMT</pubDate>
    </item>
    <item>
      <title>FAM設計方針変更</title>
      <link>https://www.kbaba1001.com/posts/202406141438_change-FAM-system-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202406141438_change-FAM-system-design/</guid>
      <content:encoded>
        <![CDATA[<p>少しずつ個人開発しているシステム FAM についての大まかな設計は
        <a href="https://www.kbaba1001.com/posts/2024020601_deno/">Deno で Google Meet みたいなやつを作ってみようと思っている</a>
        に書いたとおりなのだが、若干方向性を修正することにした。</p>
        <h2>なるべく PostgreSQL を使う</h2>
        <h3>全文検索</h3>
        <p>TypeSense などの全文検索エンジンを使うことを考えていたが、なるべくインフラコストを下げる意味では依存するシステムは少ないほうがいい。
        基本的にオンプレでの運用を考えているけど、一応クラウドで動かす場合のコストを考えてのこと。</p>
        <p>そのため PGroonga で全文検索を行う方針に考え直した。
        <a href="https://supabase.com/">Supabase</a> であればクラウドでも動くので、基本的にクラウドで動かす場合は Supabase 使ってくれという方針にした。</p>
        <p>どうしても AWS や GCP で動かしたい場合は PGroonga の代わりに bg_bigm などを使う選択肢があるが、これはオプションと言うか
        余力があれば対応くらいで優先度は下げる。</p>
        <h3>Stream にデータを読み書きする</h3>
        <p>PostgreSQL の LISTEN/NOTIFY を利用しようと思っている。</p>
        <p>参考: <a href="https://zenn.dev/micin/articles/postgresql-listen-notify">PostgreSQL LISTEN/NOTIFY, Goを利用したリアルタイム配信</a></p>
        <h3>Timescale DB はやめる</h3>
        <p>PostgreSQL で十分そうな気がするので。
        Supabase 前提なら PostgreSQL のほうが良かろう。</p>
        <h2>Strage として MinIO を使う</h2>
        <p>Strage は <a href="https://min.io/">minio</a> を docker で動かすことにした。
        これならクラウド化するときに Supabase Strage のような S3 互換のサービスが使えるし、もちろん S3 でも動く。</p>
        <p>結果的にサーバーサイドの docker compose ではアプリケーションサーバー本体、PostgreSQL、MinIO の３つが動く構成にした。</p>
        <h2>フロントエンドの変更</h2>
        <h3>Deno から Node に戻した</h3>
        <p>Deno + Vite + React 環境はなかなか難しい事がわかり、フロントは Node に戻した。</p>
        <ul>
        <li>NODE_ENV や process がないので React が production モードでしか動かず、デバッグがし辛い</li>
        <li>上記の理由で jsdom, happy-dom などを使ったテストが動かない</li>
        <li><code>import React from &quot;react&quot;</code> という書き方をしているコードが動かない
        <ul>
        <li>これは React 本体で export default が定義されてないので <code>import * as React from &quot;react&quot;</code> が正しい書き方なのだが、TS なのか Node なのかのコンパイラが気を利かせて動いているコードのようだ</li>
        <li>当然、 Deno ではエラーになる</li>
        <li>具体的には Tanstack query が動いてくれなかった</li>
        </ul>
        </li>
        <li><a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a> つらい
        <ul>
        <li>query の引数が atom で渡すしかないので同一ページに複数のコンポーネントがあり、その引数だけ変えたい場合に結構無理やりな方法でしか対処できない</li>
        <li>残念ながら Tanstack Query 直接使うほうが何かと楽ということがわかった</li>
        </ul>
        </li>
        <li><a href="https://www.kuma-ui.com/">Kuma UI</a> から <a href="https://v2.chakra-ui.com/">ChakraUI</a> へ
        <ul>
        <li>Kuma UI は理想的なのだが、もう少し機能が増えないとしんどい気がする</li>
        </ul>
        </li>
        <li>結局 jotai はグローバルステートの管理だけするようにしてあとは React Hook 系を使うようにした</li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Fri, 14 Jun 2024 14:38:37 GMT</pubDate>
    </item>
    <item>
      <title>Lumeで「ふきだし」を作る</title>
      <link>https://www.kbaba1001.com/posts/202405301700_fukidashi/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405301700_fukidashi/</guid>
      <content:encoded>
        <![CDATA[<p>《kbaba1001|/img/horse.jpg|Markdown中にこんな吹き出しを挿入できるようにしてみた》</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405301700/code.png" alt="code"></p>
        <p>Markdown 中に上記のような構文を書いておくと吹き出しを作れるようにした。</p>
        <p>どうやっているかと言うと、Lume の <code>_config.js</code> に次のようなコードを書いてある。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405301700/code2.png" alt="code2"></p>
        <p><a href="https://github.com/kbaba1001/kbaba1001.github.io/blob/main/_config.js">_config.js github</a></p>
        <p><code>page.content</code> にはレンダリングされる HTML が入っていてこれを上書きするという少々強引な方法で実装している。
        本当は markdown-it の plugin にするほうが行儀が良い。</p>
        <p><a href="https://github.com/kbaba1001/kbaba1001.github.io/blob/main/_includes/css/components/fukidashi.css">CSS が気になる方は github を参照して。</a></p>
        <p>《kbaba1001|/img/horse.jpg|今後も使っていくよ》</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 30 May 2024 17:00:51 GMT</pubDate>
    </item>
    <item>
      <title>同人誌の通信販売を開始しました</title>
      <link>https://www.kbaba1001.com/posts/202405301114_start-a-dojinshi-on-ec/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405301114_start-a-dojinshi-on-ec/</guid>
      <content:encoded>
        <![CDATA[<p>今まで書いた同人誌を通信販売するためのページを Base で作成しました。
        上記からご注文いただけたら私から発送しますので、ぜひお買い求めください。</p>
        <p><a href="https://neumann.base.shop/">ノイマンパブリッシング通販サイト</a></p>
        <p>またサークルの Instagram も始めましたのでよろしくお願いします。</p>
        <ul>
        <li><a href="https://www.instagram.com/neumann_tokyo_publishing/">Instagram - neumann_tokyo_publishing</a></li>
        </ul>
        <h2>Base になった経緯</h2>
        <p>《kbaba1001|/img/horse.jpg|一般向けの同人誌を売るためのプラットフォームがない！！》</p>
        <p>これにつきます。</p>
        <p>一応 <a href="https://booth.pm/ja">BOOTH</a> という pixiv 社がやっているサービスがあるんですが、</p>
        <ul>
        <li>ユーザーがあんま多くない気がする</li>
        <li>購入するのに pixiv のアカウントが必要なのがだるいと言う意見がある</li>
        </ul>
        <p>みたいなところが不満でやめました。
        一時期使ったこともあるんですが、手数料の安さとか在庫預かってくれるとかは嬉しいんですが、
        pixiv 自体の人気が以前ほど高くないことも考えるとあんま採用したくないなぁというのが本音。</p>
        <p>とくに、自分のやっている分野はエッセイ漫画であって、萌え萌えなオタクコンテンツってわけじゃないし。。。</p>
        <p>《妻:Assam|/img/ashley.png|FANZA とか DLSite はユーザー多いけどエロだけって感じだし。。。》</p>
        <p>《kbaba1001|/img/horse.jpg|いっそのこと通販サイトを普通に作るほうが良くね？》</p>
        <p>というわけで Base を活用することにしました。</p>
        <p>自分で PayPal とか Stripe とか使って EC サイトを作ることも考えましたが、
        特商法の表記とか利用規約とか整えるの面倒くさいのでそこは Base のような
        商品を売ることができるプラットフォームを使うことにしました。
        これならあまり手数料も取られないし。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 30 May 2024 11:14:58 GMT</pubDate>
    </item>
    <item>
      <title>DenoでHonoやReactを使ったテンプレートを作ってみた</title>
      <link>https://www.kbaba1001.com/posts/202405171328_deno-hono-react-template/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405171328_deno-hono-react-template/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202405171328/template.gif" alt="gif"></p>
        <p>Deno で本格的な Web システムを作るためテンプレートを作ってみた。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template">deno-vite-react-template</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template">deno-hono-api-template</a></li>
        </ul>
        <p>backend と frontend で完全に分かれていて RESTful API で通信するようにした。</p>
        <h2>仕様</h2>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template">deno-vite-react-template</a>
        <ul>
        <li>Deno, Vite, React による構成 (<a href="https://github.com/anatoo/vite-deno-plugin">vite-deno-plugin</a> を使った)</li>
        <li>Routing Library として <a href="https://github.com/molefrog/wouter">wouter</a></li>
        <li>UI Library として <a href="https://chakra-ui.com/">Chakra UI</a></li>
        <li>全体的に <a href="https://jotai.org/">jotai</a>, <a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a> を活用してAPI通信のキャッシュなど行っている</li>
        <li><a href="https://www.npmjs.com/package/react-if">react-if</a> は便利なので皆使ってほしい</li>
        </ul>
        </li>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template">deno-hono-api-template</a>
        <ul>
        <li><a href="https://hono.dev/">Hono</a> による RESTful API サーバー
        <ul>
        <li>RPC も使いたかったけど今回は汎用性を考えて不採用</li>
        </ul>
        </li>
        <li>PostgreSQL</li>
        <li><a href="https://github.com/golang-migrate/migrate">migrate</a> によるマイグレーション管理</li>
        <li><a href="https://kysely.dev/">kysely</a> による SQL ビルディング
        <ul>
        <li>Deno でも <a href="https://github.com/RobinBlomberg/kysely-codegen">kysely-codegen</a> がなんとか動いた</li>
        </ul>
        </li>
        <li><a href="https://deno.land/x/djwt@v3.0.2">djwt</a> による JWT 認証</li>
        <li><a href="https://github.com/aaronhuggins/deno_mocha">deno_mocha</a> によるテスト
        <ul>
        <li>deno test では afterAll などにバグがあったため</li>
        </ul>
        </li>
        <li><a href="https://zod.dev/">zod</a> によるバリデーション</li>
        </ul>
        </li>
        <li>共通
        <ul>
        <li>VS Code Devcontainer で開発できるようにしてある</li>
        <li>Linter, Formatter に <a href="https://biomejs.dev/">Biome</a> を使用。 Biome は速くてよい</li>
        <li><a href="https://github.com/spencermountain/spacetime">spacetime</a> 便利</li>
        </ul>
        </li>
        </ul>
        <h2>機能</h2>
        <ul>
        <li>email/password によるサインイン</li>
        <li>多言語対応 ( i18n )</li>
        <li>タイムゾーンや日付の表示形式の変更</li>
        <li>ダークモード</li>
        <li>認可 (Roles, Permissions)</li>
        <li>Todo リスト (CRUD のサンプルとして)</li>
        <li>招待 URL によるサインアップ</li>
        <li>各種テスト (frontend 側が途中)</li>
        </ul>
        <h2>設計的な部分</h2>
        <h3>email/password によるサインイン</h3>
        <p>JWT による email / password サインイン。
        特筆することはないけど、 <a href="https://hono.dev/middleware/builtin/jwt">Hono の middleware の jwt</a> がなんとなく使いづらかったので
        <a href="https://deno.land/x/djwt@v3.0.2">djwt</a> というライブラリで自作した。
        djwt はシークレットキー以外にも公開鍵秘密鍵での JWT の sign/verify が出来たのでそれを採用してみた。</p>
        <p><a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/tools/generate-jwt-key.ts">generate-jwt-key.ts</a> を用意したのでこれで鍵が作れる。</p>
        <h3>多言語対応 ( i18n )</h3>
        <p>色々ライブラリを調べたけど、結果的には jotai を活用して単語帳を作ることにした。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/atoms/i18n/japanese-messages.ts">英語日本語の対応表</a></li>
        </ul>
        <p>この単語帳を次のコンポーネントで扱えるようにする</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/trans.tsx">Trans</a></li>
        </ul>
        <pre><code class="language-js">&lt;Trans&gt;Hello&lt;/Trans&gt;
        </code></pre>
        <p>みたいにすると単語帳に <code>Hello</code> に対する単語があれば日本語に変換してくれるし、なければ英語のまま表示する。</p>
        <p>一応、 <a href="https://www.npmjs.com/package/fast-printf">printf</a> のフォーマットで変数も埋め込めるようにした。</p>
        <h3>タイムゾーンや日付の表示形式の変更</h3>
        <p>これもライブラリを使わず自作。</p>
        <p><a href="https://github.com/spencermountain/spacetime">spacetime</a> にタイムゾーン変換やフォーマット機能があるので
        その入力方式をフロント側で設定してバック側でDBに保存するというシンプルな方式。</p>
        <p>これも便利コンポーネントを用意しておいた。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/datetime-format.tsx">datetime-format.tsx</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/datetime-format-select.tsx">datetime-format-select.tsx</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/timezone-select.tsx">timezone-select.tsx</a></li>
        </ul>
        <h3>ダークモード</h3>
        <p><a href="https://chakra-ui.com/">Chakra UI</a> のダークモード機能に乗っかっているが、これは Cookie とかに記録する方式なので DB 保存でも良い気がする。</p>
        <h3>認可 (Roles, Permissions)</h3>
        <p>認可も最近はライブラリを使わず DB のテーブル構成でなんとかしている。</p>
        <p><a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/db/migrations/2024022701_initialize.up.sql">マイグレーションファイル</a> をみると DB
        の作りがわかると思うのだが、</p>
        <p>users -&gt; users_roles -&gt; roles -&gt; roles_permissions -&gt; permissions</p>
        <p>というリレーションがある。
        機能名を permissions テーブルに設定しておいて、それを roles に割り当てる。
        users には roles を割り当て、 permissions は直接見ないようにする。
        これにより、「ユーザーにはロールを割り当てる」「ロールには権限を割り当てる」という構造ができ、
        認可を管理しやすくなる。</p>
        <p>これは UI を見たほうがわかりやすいかもしれない。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/users_roles.png" alt="users_roles">
        <img src="https://www.kbaba1001.com/img/posts/202405171328/roles_permissions.png" alt="roles_permissions"></p>
        <p>サーバー側では次のように <a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/src/middleware/permission-checker.ts">permissionChecker</a> という middleware で permission 名を指定しておいて、 サインイン中のユーザーがその permission を持っていなければ機能が使えないようにしている。</p>
        <pre><code class="language-js">app.post(&quot;/&quot;, permissionChecker(&quot;todos&quot;), async (c) =&gt; {
        //...
        })
        </code></pre>
        <p>フロント側も <a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/can.tsx">Can</a> というコンポーネントで同じようなことができるようにした。</p>
        <h3>Todo リスト (CRUD のサンプルとして)</h3>
        <p>CRUD のサンプルのつもりで簡単な TODO リスト機能を作っておいたけど、結構認可とかユーザー設定のほうも
        CRUD が多くなったのでそっち見たほうがいいかもしれない。</p>
        <h3>招待 URL によるサインアップ</h3>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/invitations.png" alt="invitations"></p>
        <p>discord みたいにトークン付きの URL からサインアップできるようにしてある。</p>
        <p>「コピー」ボタンをクリックすると招待URLをコピーできて、これを招待したい人に渡す。</p>
        <p>トークンが有効であれば、サインアップ画面が出てくる。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/sign_up.png" alt="sign up"></p>
        <h3>各種テスト (frontend 側が途中)</h3>
        <p>サーバー側は models と routes のテストを書いてある。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template/tree/main/test">test</a></li>
        </ul>
        <p>Deno の標準の Test 機能で十分かと思ったが AfterAll 系の callback 処理で不具合があって、
        async がからむとうまく動かなかったので、 <a href="https://github.com/aaronhuggins/deno_mocha">deno_mocha</a> を使うことにした。
        今のところ大丈夫そう。</p>
        <p>frontend 側のテストも <a href="https://vitest.dev/">vitest</a> + <a href="https://github.com/capricorn86/happy-dom">happy-dom</a> で作るつもりだが、まだ出来ていない。</p>
        <h2>まとめ</h2>
        <p>今後の開発でよく使うであろう機能をとりあえずテンプレートに出来たのは役に立ちそうだ。
        色々とオレオレな仕様なので他の人は使いづらいかもしれないが、適当に改造して使ってほしい。</p>
        <p>具体的な動かし方とかはもう少し README あたりに記載が必要だと思うので追々対応する予定。</p>
        <p>Deno, Hono, Vite, あたりの組み合わせた動かし方は本当に資料が少なくて、今回の
        テンプレート公開が誰かの役に立ったら嬉しい。</p>
        <p>私は個人的に作っている FAM というシステム (Discord クローンみたいなもの) で
        このテンプレートを活用していくつもりだ。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 17 May 2024 13:28:54 GMT</pubDate>
    </item>
    <item>
      <title>FAM開発。多言語対応とか</title>
      <link>https://www.kbaba1001.com/posts/202405131843_developing-fam-about-i18n-etc/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405131843_developing-fam-about-i18n-etc/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno">前回</a> に引き続き Deno でシステムを作っている。
        まだ準備段階だがこのシステムを FAM と呼んでいる。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405131843/todo.gif" alt="TODO"></p>
        <p>今回実装した機能:</p>
        <ul>
        <li>多言語対応 (i18n)</li>
        <li>タイムゾーンの変更</li>
        <li>日付の表示フォーマットの変更</li>
        <li>ダークモード対応</li>
        <li>簡単なTODOリスト (CRUD のサンプルとして)</li>
        </ul>
        <p>ソースコードの公開はまだしてないけど後日行う予定。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 13 May 2024 18:43:18 GMT</pubDate>
    </item>
    <item>
      <title>Denoでシステムを作り始めた</title>
      <link>https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno/</guid>
      <content:encoded>
        <![CDATA[<p>とりあえずサインイン機能だけ出来た。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405102219/sign-in-user.gif" alt="進捗"></p>
        <p>今回は</p>
        <ul>
        <li>Backend: Deno + Hono</li>
        <li>Frontend: Deno + Vite + React</li>
        <li>言語: TypeScript</li>
        </ul>
        <p>という構成。</p>
        <p>ドキュメントが少なくてハマることが多い。
        試しに使ってみたライブラリが Deno でうまく動かなかったりとかも若干ある。</p>
        <p>まだまだ Deno は縛りプレイっぽさがあるけど、 Web 標準はありがたいし速いしなんとか使いこなしたい。</p>
        <p>ソースコードは後日公開する予定。
        動画でちらっと見えてるけど、まだ初期の部分なのでテンプレートとして作っていて、
        他でも使い回せるようにしている。
        サインイン機能 + 簡単な TODO リストの CRUD くらいまで作っておくつもり。
        そのくらいあればサンプルとしては十分だろう。</p>
        <p>サーバー側では PostgreSQL + Kysely 構成もあり、結構実践的な作りになっている。</p>
        <p>Hono の RTC で色々楽をしたかったけど、なんかかえって面倒くさい気がしたのでいったんただの REST にしている。
        そうなると Swagger とか若干欲しくなるなぁ。。。
        <a href="https://github.com/scalar/scalar/tree/main/packages/hono-api-reference">hono-api-reference</a> この辺が便利かもなぁ
        あるいは <a href="https://github.com/honojs/middleware/tree/main/packages/trpc-server">tRPC</a>。</p>
        <p>まぁこういうのはある程度出来てからでもいい気もする。
        公開用の API と内部用の API は別だろうし。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 10 May 2024 22:19:26 GMT</pubDate>
    </item>
  </channel>
</rss>