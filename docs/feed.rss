<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>kbaba1001 ブログ</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>日本語ローカル LLM 「ELYZA」と vLLM を試す</title>
      <link>https://www.kbaba1001.com/posts/2024021301_japanese-local-llm2/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024021301_japanese-local-llm2/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>前回の
        <a href="https://www.kbaba1001.com/posts/2024020902_japanese-local-llm/">【悲報】日本語ローカル LLM がアホすぎる件</a>
        から次のことを試した。</p>
        <ul>
        <li>一番頭のいいモデルである
        <a href="https://huggingface.co/tokyotech-llm/Swallow-70b-hf">Swallow-70b-hf</a> を試す</li>
        <li><a href="https://huggingface.co/elyza/ELYZA-japanese-Llama-2-13b-fast-instruct">elyza/ELYZA-japanese-Llama-2-13b-fast-instruct</a>
        を試す</li>
        <li><a href="https://github.com/vllm-project/vllm">vLLM</a> を試す</li>
        </ul>
        <h2>Swallow-70b-hf</h2>
        <p>自分の GPU (GeForce GTX 1080 Ti)
        では重すぎて１時間待っても3文字くらいしか応答がなかった。
        ちょっと実用性がないので採用を諦めた。</p>
        <h2>ELYZA-japanese-Llama-2-13b-fast-instruct</h2>
        <p>Swallow は前回かなり残念な感じだったので別のモデルを試すことにした。 そこで
        ELYZA 社の上記のモデル。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/2024021301/elyza.png" alt="ELYZA"></p>
        <div class="post-learge-font">
        まともな回答してる！
        <p>これだよ、これ！！</p>
        </div>
        <p>前回の Swallow は何だったのかと思うほどきちんとした回答が返ってきた。
        応答速度も数分かかるものの許容範囲レベル。 ひとまずモデルとしては
        ELYZA-japanese-Llama-2-13b-fast-instruct で決定することにした。</p>
        <h2>vLLM による高速化</h2>
        <p>vLLM はローカル LLM を高速化できるライブラリ。</p>
        <p><a href="https://docs.vllm.ai/en/latest/serving/deploying_with_docker.html">vllm/vllm-openai</a>
        という Docker イメージがあるので試しに使ってみたが、 GPU
        メモリーリークを起こして動かなかった。 自分の GPU
        が貧弱なためか、設定を変える必要があるのかいまいちよくわからない。</p>
        <p>ノート PC の GPU でもメモリーリークしたので多分設定を変える必要がある。</p>
        <p>引き続き試すとして、一旦は llama-cpp-python で動かすことにする。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Google アカウントからもメッセージを送れるようになりました</title>
      <link>https://www.kbaba1001.com/posts/2024020901_add-google-form/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020901_add-google-form/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>試験的に Google Form でのメッセージも受け付けるようにしました。</p>
        <p>↓の「Google アカウントからメッセージを送る」からどうぞ。</p>
        <p>よろしくお願いします。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 09 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>【悲報】日本語ローカル LLM がアホすぎる件</title>
      <link>https://www.kbaba1001.com/posts/2024020902_japanese-local-llm/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020902_japanese-local-llm/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>ChatGPT を活用した Chatbot 制作の話はよく聞くのだが、それならローカル LLM
        でも作れるんじゃないかと思ってやってみた話。</p>
        <h2>ローカル LLM の世界</h2>
        <p>ローカルで動作する LLM は色々あるっぽいけど今回は Meta 社が作っている
        <a href="https://llama.meta.com/">Llama 2</a> 系で実験することにした。</p>
        <p>Llama 2 は gpt-3.5 レベルの性能があるらしい。</p>
        <p>しかし、日本語対応してないので東工大が作っている
        <a href="https://huggingface.co/tokyotech-llm">Swallow</a> を使うことにした。
        詳しいドキュメント:
        <a href="https://zenn.dev/tokyotech_lm/articles/d6cb3a8fdfc907">Zenn - Swallow: LLaMA-2 日本語継続事前学習モデル</a></p>
        <h2>ローカル LLM の実行</h2>
        <p><a href="https://huggingface.co/tokyotech-llm/Swallow-7b-hf">Swallow の README</a>
        にあるように Python でコードを書いてローカル LLM を動かしても良いのだが、
        少々煩雑だと思う。</p>
        <p>できれば Web API の形で呼び出したい。調べたらちょうどよいのがあった。</p>
        <ul>
        <li><a href="https://github.com/jasonacox/TinyLLM">TinyLLM</a></li>
        </ul>
        <p>これは Llama 2 系のローカル LLM を Chatbot として動くように少々手を加えたもの。</p>
        <p>実質内部で使っているのは</p>
        <ul>
        <li><a href="https://llama-cpp-python.readthedocs.io/en/latest/">llama-cpp-python</a></li>
        <li><a href="https://docs.vllm.ai/en/latest/">vLLM</a></li>
        </ul>
        <p>なので、詳しくなってきたらこの辺を直接使うつもり。 似たようなプロジェクトで
        <a href="https://ollama.ai/">Ollama</a> というのもある。</p>
        <h2>TinyLLM (llama-cpp-python) を動かすための準備</h2>
        <p>TinyLLM (というか llama-cpp-python ) でモデルを使うために Swallow
        のリポジトリから gguf ファイルを作る必要がある。</p>
        <p>変換器を作ってくれている人がいたのでこれを使うことにした。</p>
        <ul>
        <li><a href="https://github.com/3eeps/cherry-py">cherry-py</a> の convert_hf_to_gguf.py</li>
        </ul>
        <pre><code class="language-bash">pip install gguf numpy torch sentencepiece
        python convert_hf_to_gguf.py ../Swallow-7b-hf/ 0
        </code></pre>
        <p>みたいな感じで動かすことができる。</p>
        <h2>TinyLLM (llama-cpp-python) を動かす</h2>
        <p>llama-cpp-python を動かす用の docker-compose.yml
        を書いたりしてよしなに動かした。</p>
        <p>TinyLLM には <a href="https://github.com/jasonacox/TinyLLM/blob/main/chat.py">chat.py</a>
        という動作確認用のファイルが用意されているのでこれを日本語にして使うことにした。</p>
        <p>で、実行結果がこちら：</p>
        <p><img src="https://www.kbaba1001.com/img/posts/2024020902/swallow-llm.png" alt="swallow-llm.png"></p>
        <div class="post-learge-font">
        Σ(･ω･ﾉ)ﾉ ！？
        </div>
        <p>いや、2 ちゃんねるじゃねぇか。。。</p>
        <p>事前にベースのプロンプトとして次の文字を入れてある。</p>
        <pre><code>&quot;あなたの名前はポピンズです。あなたは非常に知的なアシスタントです。
        回答は簡潔かつ正確に答えてください。現在時刻は2024年02月09日です。&quot;
        </code></pre>
        <p>その上で、 <code>あなたの名前はなんですか？</code>
        と聞いた際の回答が上記なのでひどすぎる。。。 会話になってないし。</p>
        <p>今回使用している
        <a href="https://huggingface.co/tokyotech-llm/Swallow-7b-hf">Swallow-7b-hf</a>
        は一番頭が悪いモデルではあるものの、この結果はちょっと残念すぎる。。。
        もう少しまともに動いてほしかった。</p>
        <p>というか思いっきり 2 ちゃんねるの ID
        とか投稿日とか見えてるけどいいのかこれは。。。</p>
        <p>色々と思うことがあるけど残念な気持ちだ。</p>
        <h2>次はどうするか</h2>
        <ul>
        <li>一番頭のいいモデルである
        <a href="https://huggingface.co/tokyotech-llm/Swallow-70b-hf">Swallow-70b-hf</a>
        を試す予定</li>
        <li>動作が早くなるらしいので vLLM も試したい</li>
        <li>Python に詳しくないので JavaScript から実行するのも試したい</li>
        </ul>
        <p>続き:
        <a href="https://www.kbaba1001.com/posts/2024021301_japanese-local-llm2/">日本語ローカル LLM 「ELYZA」と vLLM を試す</a></p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 09 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>マシュマロの設定をゆるくしました</title>
      <link>https://www.kbaba1001.com/posts/2024020801_change-marshmallow-setting/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020801_change-marshmallow-setting/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>今までマシュマロのプレミアム会員じゃないとコメントが送れない設定になっていたようなので、
        ログインユーザーであればメッセージを送れるように変更しました。</p>
        <p>よろしくお願いします。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Deno で Google Meet みたいなやつを作ってみようと思っている</title>
      <link>https://www.kbaba1001.com/posts/2024020601_deno/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020601_deno/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>Google Meet みたいなブラウザで動作するビデオ会議ツールを作りたい。</p>
        <p>そこで Node で作っても良いのだが、 以前から少しずつ使っている Deno
        をそろそろ本格的に使っていきたいので試しにサーバー、フロント共に Deno
        でやってみることにした。</p>
        <p>ある程度動くものができたらオープンソースにする予定。</p>
        <h2>Deno の API サーバー事情</h2>
        <p>Deno には <code>Deno.serve</code> というシンプルなサーバーが組み込まれている。</p>
        <ul>
        <li><a href="https://docs.deno.com/runtime/tutorials/http_server">Simple HTTP Web Server</a></li>
        </ul>
        <p>しかしこれは Routing の機能などがないので、そこは別途何とかするしかない。</p>
        <p>色々調べたのだが、現状、それなりにメンテされてそうで使われてそうなライブラリは次</p>
        <ul>
        <li><a href="https://oakserver.github.io/oak/">oak</a></li>
        <li><a href="https://hono.dev/">Hono</a></li>
        </ul>
        <p>他にも色々あったけど、2年くらい前にコミットが止まっているものが多くてやめた。</p>
        <p>Deno
        は少し使ってみればわかるけど、本体にまだまだ変更が入るのでライブラリを作ってもメンテするのが大変なのよね。。。
        そのため放置されがちなのは理解できる。</p>
        <p>今回は Hono
        を採用することにした。以前から少しブログなどで注目されているのを知っていたし、日本人が作っているので応援したいため。</p>
        <h2>Deno で React のフロントエンドを作る</h2>
        <p>どうせならフロントエンドも Deno で開発したい。 npm が使えるようになったので Vite
        も使えるようだが、次のライブラリを入れたほうが便利そうだったので採用した。</p>
        <ul>
        <li><a href="https://github.com/anatoo/vite-deno-plugin">vite-deno-plugin</a></li>
        </ul>
        <p><a href="https://github.com/anatoo/vite-deno-plugin/tree/main/examples/react">React Example</a>
        が用意されているのでこれをコピーして土台とした。</p>
        <h3>その他、採用予定のライブラリ</h3>
        <ul>
        <li><a href="https://github.com/molefrog/wouter">wouter</a></li>
        <li><a href="https://www.kuma-ui.com/">Kuma UI</a></li>
        <li><a href="https://jotai.org/">jotai</a></li>
        <li><a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a></li>
        <li><a href="https://github.com/jotaijs/jotai-uncontrolled">jotai-uncontrolled</a>
        <ul>
        <li><a href="https://zenn.dev/dai_shi/articles/01813b22907dcf">Document</a></li>
        </ul>
        </li>
        </ul>
        <p>この辺を使う予定。</p>
        <p>wouter は Preact 対応してあるということで Deno
        界隈ではちょっと使われ始めているライブラリのようだ。 不十分だったら React Router
        に変えようと思う。</p>
        <p>Kuma UI は Chakra UI からの置き換えを考えている。 Kuma UI は Chakra UI
        ほど機能がないのだが、 CSS の読み込みの仕組みを改善していて速いとのこと。</p>
        <p>jotai
        は以前から使っているのだが、もっと本格的に使っていきたいのでプラグインも入れる予定。</p>
        <h2>他の Web フレームワーク</h2>
        <ul>
        <li><a href="https://fresh.deno.dev/">Fresh</a>
        <ul>
        <li>Deno の公式(たぶん) の Web Framework</li>
        <li>サーバー、フロント共に作れるが次の理由で今回は不採用
        <ul>
        <li>Streaming 対応が不安なため</li>
        <li>サーバーとフロントを分離した設計にしたいため</li>
        </ul>
        </li>
        </ul>
        </li>
        <li><a href="https://github.com/exhibitionist-digital/ultra">Ultra</a>
        <ul>
        <li>Fresh に似ているけど React が使える</li>
        </ul>
        </li>
        </ul>
        <h2>Streaming Data とデータベース</h2>
        <p>ビデオ会議ツールを作るために
        <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Web Streams API</a>
        を使って Streaming データをサーバーとフロントでやり取りする設計を考えている。</p>
        <p>そこで、 Streaming
        データをどのようにデータベースに保存するかが重要になってくる。 普通の RDBMS
        でも良いのだが、以前からちょっと気になっている
        <a href="https://www.timescale.com/">Timescale DB</a> を使ってみようと思っている。 これは
        PostgreSQL を拡張したデータベースなので使いやすそうだなと思っている。</p>
        <p>Docker でもクラウドでも使える。</p>
        <h2>全文検索</h2>
        <p>また、今どき全文検索も必須の機能となってきたのだが、
        日本語対応も含めて考えるとデフォルトの PostgreSQL では心もとない。</p>
        <p>単に Google Meet クローンを作るだけなら全文検索はいらない気もするけど、
        なんとなくチャット機能も作りたいので、実際には Discord
        クローンみたいになりそうだ。</p>
        <p>で、次のような候補を考えた。</p>
        <ul>
        <li><a href="https://github.com/pgbigm/pg_bigm">pg_bigm</a>
        <ul>
        <li>PostgreSQL のプラグイン。 AWS RDS や GCP Cloud SQL
        でも使えるが、他に比べると遅いらしい。あんま開発もされてなさそう。</li>
        </ul>
        </li>
        <li><a href="https://pgroonga.github.io/">PGroonga</a>
        <ul>
        <li>これも PostgreSQL のプラグイン。速いのだが pg_bigm と違って AWS RDS や GCP
        Cloud SQL がサポートしてない。</li>
        <li>なぜか Supabase
        では使えるのだが、他のクラウドサービスでも使えるように営業を頑張ってほしいところ……。</li>
        </ul>
        </li>
        <li><a href="https://typesense.org/">TypeSense</a>
        <ul>
        <li>これはプラグインではなく ElasticSearch や Algoria
        のような独立した全文検索エンジン</li>
        <li>Docker
        のイメージもありオンプレでも使えるし、クラウドサービスも提供されている</li>
        <li>ドキュメントを読んだ感じ ElasticSearch ほど面倒なクエリではなさそう</li>
        </ul>
        </li>
        </ul>
        <p>総合的に考えて今の第一候補は TypeSense 。</p>
        <h2>SQL Builder, ORM 的なやつ</h2>
        <p><a href="https://kysely.dev/">kysely</a> が deno
        でも動くようなので、特にトラブルなければこれかなぁ。 Timescale DB
        との相性が若干不安ではあるが...。</p>
        <p>kysely そのものは必要十分な機能を備えていてわりと気に入っている。 Prisma
        が苦手な人には特におすすめかも知れない。</p>
        <h2>TypeScript でやるのか？ 一応そのつもり...</h2>
        <p><a href="https://www.kbaba1001.com/posts/2023122001_typescript/">TypeScriptって面倒くさいだけでは...</a>
        で書いた通り TypeScript があまり好きではないのだが、今回は一応 TypeScript
        前提で考えている。</p>
        <p>理由としては</p>
        <ul>
        <li>コード生成機能を使うようなものがない（GraphQL, gRPC, Prisma
        など）はずなので、自分で型を定義する分にはマシではなかろうか</li>
        <li>テスト減らしたい</li>
        <li>Clojure
        でもそうなんだけど関数の引数として何を期待しているかくらいは明示的にしたい事がある
        (とはいえ今更 prop-types はなぁ...)</li>
        <li>Deno なら Repl とか環境セットアップが面倒くさくない</li>
        </ul>
        <p>らへん。</p>
        <p>どうしても生産性落ちそうだったら JS にするかもしれない。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 06 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>NextCloudで家庭内に閉じたチャットとファイル共有システムを構築した</title>
      <link>https://www.kbaba1001.com/posts/2024020201_nextcloud/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020201_nextcloud/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p><a href="https://nextcloud.com/">Nextcloud</a> というオンプレで使えるグループウェアを Conoha
        のサーバーで動かして、家庭内の会話などがクラウドサービスの会社にバレないようになった。</p>
        <p>主に使いたかったのはチャットとファイル共有。</p>
        <h2>チャット</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024020201/nextcloud.png" alt="nextcloud"></p>
        <p>チャットの画面。妻との会話が主だがトピックごとに整理する予定。</p>
        <p>さらに Twitter
        という自分だけのルームを作ったのでここで独り言も言うことができる。便利。</p>
        <p>いろいろ試したけど、ちゃんと音声通話も問題なくできた。</p>
        <p>google play や apple store に
        <a href="https://play.google.com/store/apps/details?id=com.nextcloud.talk2">Nextcloud Talk</a>
        というアプリがあり、これを使えばスマホでも快適に会話ができる。</p>
        <h2>ファイル共有</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/2024020201/nextcloud2.png" alt="nextcloud2"></p>
        <p>google drive
        みたいな感じで使える。マークダウンもエディタで表示してくれて便利そう。
        素晴らしい。</p>
        <p><a href="https://play.google.com/store/apps/details?id=com.nextcloud.client">スマホアプリ</a>
        もある。</p>
        <h2>導入手順</h2>
        <p>Nextcloud は導入が非常に簡単だったのが最高だった。</p>
        <p>基本的に
        <a href="https://github.com/nextcloud/all-in-one?tab=readme-ov-file#how-to-use-this">all-in-one</a>
        の手順に従っただけ。</p>
        <ul>
        <li>docker をインストール</li>
        <li>docker で ipv6 を使えるように設定変更</li>
        <li>docker run で nextcloud を動かす</li>
        <li>ufw で Firewall 設定を変更</li>
        <li>ブラウザで <a href="https://xxxxx:8080/">https://xxxxx:8080</a> にアクセスして初期設定</li>
        <li>上記の管理画面 (Nextcloud AIO) は Nextcloud
        をセットアップするための管理画面なので、適当に全文検索の拡張入れたりタイムゾーンを設定したりして
        Nextcloud 本体をインストールした</li>
        <li>その後、 443 ポートで Nextcloud
        が動くのでドメインなど設定して、一般アカウントを追加</li>
        </ul>
        <p>この all-in-one の docker
        が非常に優秀で何もしなくてもセットアップできてしまった。 全部終わると 10
        個くらいのコンテナが動いていた。</p>
        <p>これくらいの手軽さでできるならちょっとした少人数の会社のグループウェアとして使っても良さそう。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 02 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>サーバー内での docker compose up をローカルから行う方法</title>
      <link>https://www.kbaba1001.com/posts/2024020101_docker-context/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024020101_docker-context/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>まずサーバーで docker や docker compose が動くようにしておく。 その後、</p>
        <pre><code class="language-bash">$ DOCKER_HOST=&quot;ssh://user@remotehost&quot; docker compose up -d
        </code></pre>
        <p>するだけで遠隔サーバーで docker container を起動できる。</p>
        <p>知らなかった...。</p>
        <p>さらに docker context を使うと DOCKER_HOST を変えなくても指定した環境で docker
        compose up できる。</p>
        <pre><code class="language-bash">$ docker context create remote --docker &quot;host=ssh://user@remotemachine&quot;
        $ docker --context remote compose up -d
        </code></pre>
        <div class="post-learge-font">
        便利すぎでは～！！
        </div>
        <p>もちろん <code>~/.ssh/config</code> に設定した Host 名も使える。 僕の場合、 <code>~/.ssh/config</code>
        に次のような設定がある。</p>
        <pre><code class="language-bash">host monday
        HostName xxx.xxx.xxx.xxx
        User xxxxxxxx
        ForwardAgent yes
        IdentityFile ~/.ssh/id_ed25519
        </code></pre>
        <p>ので</p>
        <pre><code class="language-bash">$ DOCKER_HOST=&quot;ssh://monday&quot; docker compose up -d
        </code></pre>
        <p>でよい。</p>
        <p>参考:
        <a href="https://www.docker.com/blog/how-to-deploy-on-remote-docker-hosts-with-docker-compose/">How to deploy on remote Docker hosts with docker-compose</a></p>
        <p>本格的に運用するなら k3s とかで k8s 環境を作ったほうが良さそう。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 01 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>自宅サーバーに github、 dropbox、 ngrok みたいなのがほしい</title>
      <link>https://www.kbaba1001.com/posts/2024013101_on-premises/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024013101_on-premises/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>自宅サーバーの活用について考えるとやっぱりファイル共有みたいなことがしたいし、
        どうせなら git サーバーとして push/pull したい。 固定 IP が面倒くさくて ngrok
        を使っているが、そこそこお値段がするのでどうせならここもオープンソースにしたい。</p>
        <p>みたいなことを考えた結果、次を導入しようと思っている。</p>
        <ul>
        <li>ファイル共有: <a href="https://onionshare.org/">OnionShare</a></li>
        <li>git サーバー: <a href="https://github.com/gitbucket/gitbucket">GitBucket</a></li>
        <li>トンネリング: <a href="https://github.com/fatedier/frp">frp</a></li>
        </ul>
        <h3>ファイル共有 (Dropbox alternatives)</h3>
        <p>あまりクラウドに置いておきたくないデータがいくつかあり、そういうのを自宅サーバーに置いておきたいのだが、
        単に SSH するだけだとファイルの閲覧が不便だったりするので、 Dropbox
        的に使えるやつがほしくなった。</p>
        <p><a href="https://min.io/">Minio</a> が GUI ツールもあるのでそれでもいいのだが、調べたら
        <a href="https://onionshare.org/">OnionShare</a>
        というのがスマホアプリもあって良さそうな気がしたので試してみたい。</p>
        <h3>git サーバー (Github alternatives)</h3>
        <p><a href="https://about.gitlab.com/">GitLab</a>
        とかが有名だがそんなに高機能じゃなくていいのと、
        前から少し気になっていることもあり
        <a href="https://github.com/gitbucket/gitbucket">GitBucket</a> を導入予定。
        これは確か日本人が作っていたはず。</p>
        <h3>トンネリング (ngrok alternatives)</h3>
        <p><a href="https://ngrok.com/">ngrok</a> の production apps プランを使っているのだが、１つの
        domain を作るたびに月 $15
        かかるので何個かやっているとそれなりの出費になってきた。</p>
        <p>調べたらめちゃくちゃしっかりしたまとめが作ってあった。
        <a href="https://github.com/anderspitman/awesome-tunneling">awesome-tunneling</a></p>
        <p>これによると、 CloudFlare Tunnel がおすすめ、 self-host したいなら
        <a href="https://github.com/fatedier/frp">frp</a> という感じなのでおすすめに従って、 frp
        を試してみようと思う。</p>
        <h3>雑感</h3>
        <p>自宅サーバーがあると電気代を無駄にしたくないので活用したくなる。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 31 Jan 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>いつの間にか AtCoder で Babashka が動くようになっていた</title>
      <link>https://www.kbaba1001.com/posts/2024012902_babashka-at-coder/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024012902_babashka-at-coder/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/2024012902/atcoder.png" alt="AtCoder"></p>
        <div class="post-learge-font">
        <p>いつの間にか <a href="https://atcoder.jp/">AtCoder</a> で
        <a href="https://github.com/babashka/babashka">Babashka</a> が使えるようになっている！！！</p>
        <p>めちゃくちゃ嬉しい！！</p>
        <p>AtCoder 始めます！！</p>
        </div>
        <p>どういうことかというと、今まで AtCoder で普通の Clojure
        の実行はできていたのですが、どうも起動時間も含めて実行速度
        として計算されていたらしく、とんでもなく不利でした。</p>
        <p>一方 Babashka は GraalVM を使った起動がめちゃくちゃ速い Clojure
        の実行環境で、これが AtCoder で使えたらいいのになぁと多くの Clojurians
        は思ってました。</p>
        <div class="post-learge-font">
        <p>で、それが叶いました。</p>
        <p>最高ー！！</p>
        </div>
        ]]>
      </content:encoded>
      <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>2 月 25 日 (日) に「１か月間全力で個人サイトを作ろうハッカソン、発表会」を開催します</title>
      <link>https://www.kbaba1001.com/posts/2024012901_hackathon/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/2024012901_hackathon/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/2024012901_hackathon.jpg" alt="2024012901_hackathon.jpg"></p>
        <p>個人サイトを<strong>全力で</strong>作りましょう！</p>
        <p><strong>全力</strong>とは自分の持てる技術の全てを費やすという意味です。</p>
        <p>いにしえの個人サイトといえば、</p>
        <ul>
        <li>アクセスカウンター</li>
        <li>Web 拍手</li>
        <li>掲示板</li>
        <li>チャット</li>
        <li>相互リンク</li>
        </ul>
        <p>など当時の技術（だいたい CGI）をフル動員した個人サイトがたくさんあったものです。
        徐々に Twitter などの SNS に移り変わっていきましたが、それまでは皆 HTML とか CSS
        とか 自力で勉強して個人サイトを作ってました。
        今にして思えばすごい時代です。プログラマでもない人たちがこれら技術を自力でなんとか勉強して
        いたわけですから。</p>
        <p>さて、そんな中なぜ今更個人サイトを作るのかというと、個人的に 昨今 Twitter が X
        になったりしてなんとなく SNS やクラウドサービスに
        疑問を持つような機会が増えてきました。
        結局信用できるのは自分で運用しているものだけかなぁ、みたいな気持ちがあります。</p>
        <p>現在このブログは静的サイトジェネレータを使って Github Pages で公開していますが、
        もっと掲示板などの機能を作ってみたくなってきました。</p>
        <p>一人で作っても良いのですが、誰か一緒にやりたい方がいたら嬉しいのでハッカソンにすることにしました。</p>
        <h2>ハッカソンの概要</h2>
        <p>今からだいたい１ヶ月後の 2 月 25 日 (日) に
        「<a href="https://connpass.com/event/309089/">１か月間全力で個人サイトを作ろうハッカソン、発表会</a>」
        を開催します。</p>
        <p>このときに、各参加者に自分で作った個人サイトを発表していただきます。</p>
        <p>なので、 2 月 25 日 (日)までに各自、全力で個人サイトを作ってください。</p>
        <h3>参加方法</h3>
        <ul>
        <li>「<a href="https://connpass.com/event/309089/">１か月間全力で個人サイトを作ろうハッカソン、発表会</a>」に申し込んでください。</li>
        <li>参加費等はありません。</li>
        <li>いつでも参加表明して頂いて大丈夫です（例えば発表会の前日から数時間で作った、でも OK です）</li>
        </ul>
        <h3>発表会当日</h3>
        <ul>
        <li>オンライン (google meet) で開催します。(URL は connpass
        の参加者にのみ公開します)</li>
        <li>顔出しは任意です。</li>
        <li>作品を参加者自身でプレゼンして頂きます。
        <ul>
        <li>発表時間は参加人数にもよりますが 15 分程度を想定</li>
        </ul>
        </li>
        <li>主催者の独断で審査を行い、優勝者を決めます。</li>
        </ul>
        <h3>作品の条件</h3>
        <ul>
        <li><strong>インターネット上に公開されており、 URL (または IP アドレス)
        でアクセスできることを必須とします。</strong></li>
        <li>個人サイトのコンテツ内容は自由です。 R-18
        を含む場合はそのページを開く前に年齢確認をするなど配慮をお願いします。
        <ul>
        <li>発表会では全年齢向けのページのみ表示し、審査の対象とします</li>
        </ul>
        </li>
        </ul>
        <h3>審査について</h3>
        <ul>
        <li>発表会の最後に、各参加者の発表会の内容を元にして主催者の独断で優勝者を決めます</li>
        <li>評価基準として技術点、個人サイトらしさ、コンテンツの面白さ、将来性などを考慮します</li>
        <li>優勝者には景品として ◯◯◯◯ を差し上げます (TODO 景品決める)</li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>