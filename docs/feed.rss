<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>ハッカーと漫画家</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>AIコンピュータについて</title>
      <link>https://www.kbaba1001.com/posts/202409280755_ai-computer/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280755_ai-computer/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.contec.com/-/media/Contec/jp/news/2024/24091000/img_01.jpg" alt="DX-M2300"></p>
        <p><a href="https://www.contec.com/jp/news/2024/2024091000/">DX-M2300</a> という組み込み用のパソコンがあるらしい。
        組み込み用というのはようするに Raspberry Pi みたいなやつの超すごいやつということらしい。
        ロボットの制御なんかに使えるみたいなんだけど、 Jetson AGX Orin 64GB という CPU/GPU を搭載していて、
        VRAM 64GB ということなのでかなり処理性能が高い。</p>
        <p>最近のローカルLLM、例えば llama などでも 70B くらいのがあるわけだが、こういうのを動かす環境が結局
        H100 みたいな超高級(500万円くらい) なマシンしかないという状況は結構きつくて、
        DX-M2300 シリーズはオープン価格だがだいたい 40 万～ 100 万くらいのはずで、
        比較的手が出しやすい。</p>
        <p>むりにファンレスである必要はないと思うのだが（というかこのでかいヒートシンクつけるくらいならファンつけてくれたほうが。。。）、
        たぶんそこはロボットとして音を出したくないみたいな需要があるのだろう。
        たしかにドラえもんからファンの音がしていたら嫌だ。</p>
        <p>ただいまいちこのマシンの購入方法がわからない。
        代理店に問い合わせてくれとのことなのだが、１台だけの発注を受け入れているのかどうか。。。</p>
        <p>RTXシリーズがなかなか5000系がでなくて Nvidia がもう個人向けの GPU に興味なさそうな気がするので、
        Jetson シリーズにはちょっと期待している。</p>
        <p>とにかく VRAM が大きい GPU がそれなりの値段で欲しい。。。</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 07:55:55 GMT</pubDate>
    </item>
    <item>
      <title>Web UIデザインの勉強をしている</title>
      <link>https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202409100908/ui-design.jpg" alt="UI Design Books"></p>
        <p>前から持っていた本も含めて上記の本を読んでいる。</p>
        <p>色彩検定３級は前から持っているのだが、内容を忘れてしまったので復習している。
        ちょっと概念過ぎて応用までが遠い気もする。</p>
        <h3>なぜ勉強しているのか</h3>
        <p>《kbaba1001|/img/horse.jpg|デザインのできるエンジニアになりたい》</p>
        <p>以前から画面を作る機会は多く、デザイナーを雇う予算がない開発の現場も多いので、
        私が自分でワイヤーフレームなど書くことも多々あり、デザインを勉強したいという気持ちは以前からあった。
        というか、以前からデザインは勉強しているのだが、いまいち正解がわからず自らをデザイナーと名乗るほど
        習得できている気がしない。</p>
        <p>ある意味で、デザインは機能を作ることより独学が難しいかもしれない。
        機能は動いているかどうかという明白は指標があるけど、デザインにはそれがない。
        素人でも口を出せる部分もある一方で、専門家らしい意見が求められる場合も多いように思う。
        結局のところ、なぜそのデザインにしたのかを自分なりに一つ一つ正解を作っていく分野という気がする。</p>
        <p>一方で、単に「デザイン」という場合、出版物（チラシとか本とか）のデザインを指す場合が多いように思う。
        私にとってそういうデザインも同人誌づくりでは必要なのだが、本職であるWebシステム開発で活かすのであれば、
        やはりWebデザインについて学びたい。
        印刷物は後から動いたり画面の大きさが変わったりしないので、どうしてもWebやスマホに応用が不十分なことがあるので、
        今回は Web UI デザインに焦点を絞っている本を買ってみた（下の２冊）。</p>
        <h3>感想『縁の下のUIデザイン』</h3>
        <p>かつてWeb+DB Press で連載していたものが本になったらしい。
        Web+DB Press は廃刊になってしまったのが未だに惜しい。。。</p>
        <p>内容としては UI の小技集だがどういう意図でそのUIを使えばいいかを
        比較しながら説明してくれているのでわかりやすかった。</p>
        <p>またどのようなUIが楽しいか、という観点でもUIを考えており、
        単に利便性の話だけでなくユーザーにとって楽しいと思えるシステムを
        提供できているかというのは指標として今後も大切にしたいと思った。</p>
        <p>私のような非デザイナーにはありがたい。</p>
        <p>エンジニアがデザインを学ぶ場合、ほとんどのデザイナーよりも実装力は高い場合が多いのではなかろうか。
        どのように HTML や CSS, JS を使えばその機能を実装できるかはエンジニアの方が詳しいはずだ。
        しかし、なぜその UI にするのかという部分でエンジニアはデザイナーに劣る。</p>
        <h3>感想『UIデザイン必携』</h3>
        <p>『縁の下のUIデザイン』と色彩検定３級の中間くらいの知識をちょうど補ってくれる感じで良かった。</p>
        <p>色彩検定３級で出てくる用語、概念を、じゃあWebデザインでどのように考えるかという部分が
        イマイチ自分の中で整理できていなかったのだが、この本はそのへんをうまく説明してくれている気がする。</p>
        <p>『縁の下のUIデザイン』ほど実装に特化しておらず、でもWebやスマホを中心としたUIの話が
        まとまっており良い感じだ。</p>
        <p>この本１冊での満足感はそこまで高くないかもしれないけど、最初の写真にある４冊全て含めると
        デザインについての学習はかなりできると思う。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 10 Sep 2024 09:08:37 GMT</pubDate>
    </item>
    <item>
      <title>React の Tips やおすすめライブラリなど</title>
      <link>https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</guid>
      <content:encoded>
        <![CDATA[<p>React も使い始めて数年が経ち、自分なりの書き方も確立できてきたので Tips などをまとめてみようと思う。</p>
        <h3>React If</h3>
        <p><a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。大事なことなのでもう一度。
        <a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。</p>
        <p>簡単に言えば、 if 文や Switch 文を React コンポーネントで書ける。</p>
        <pre><code class="language-javascript">const Bar = ({ name, age, drinkingAge }) =&gt; (
        &lt;div&gt;
        &lt;Header /&gt;
        &lt;If condition={age &gt;= drinkingAge}&gt;
        &lt;Then&gt;
        &lt;span className=&quot;ok&quot;&gt;Have a beer, {name}!&lt;/span&gt;
        &lt;/Then&gt;
        &lt;Else&gt;
        &lt;span className=&quot;not-ok&quot;&gt;Sorry, {name}, you are not old enough.&lt;/span&gt;
        &lt;/Else&gt;
        &lt;/If&gt;
        &lt;Footer /&gt;
        &lt;/div&gt;
        );
        </code></pre>
        <p>React の読みづらさの一つが三項演算子だと思っていて、コンポーネントで書いたほうが読みやすい。
        Solidjs にこんな感じの機能があって似たようなことが React でもできないかと思って探したら React If を見つけたという経緯。</p>
        <h3>react-timer-hook</h3>
        <p>アニメーションなど時間を扱いたいケースが時々あって、
        そういう場合に <a href="https://www.npmjs.com/package/react-timer-hook?activeTab=readme">react-timer-hook</a> が
        非常に使いやすかった。</p>
        <p><code>useTimer</code> という hook を作って時間を扱うことができる。便利。</p>
        <h3>そもそも SPA でよくね？</h3>
        <p>Next.js や Remix などの SSR 系のライブラリが流行っているが、ほとんどのケースでは SPA で十分だと思う。
        SSR はサーバーサイドも一緒に管理することになり、まだまだ気楽に書けるという印象ではない。</p>
        <p>特に別途 BFF っぽい API サーバーがあるのであれば、 SPA で十分ではないかというのは検討したほうがいい。
        SSR は開発コストが高く、それを考慮しても SSR でしかパフォーマンスが出せないという場合にのみ使う方が良い。</p>
        <h3>Wouter</h3>
        <p>React または Preact において軽量なルーティングライブラリとして使えるのが <a href="https://github.com/molefrog/wouter">Wouter</a> 。</p>
        <p>SPAならこれで十分。余分な機能がない。以上。</p>
        <h3>jotai</h3>
        <p><a href="https://jotai.org/">jotai</a> は結構有名なライブラリになってしまったが、グローバルステートなどを扱うための状態管理ライブラリ。
        いわゆる <code>useContext</code> の代替。</p>
        <p>いろいろなプラグインがあって、目的に合わせて変えられるのが良い。
        私が特に気に入っているのは</p>
        <ul>
        <li><a href="https://jotai.org/docs/extensions/effect">jotai-effect</a>
        <ul>
        <li>useEffect 的なやつ</li>
        </ul>
        </li>
        <li><a href="https://jotai.org/docs/extensions/scope">jotai-scope</a>
        <ul>
        <li>jotai の atom はグローバル変数にならざるを得ないので、スコープを付けられるライブラリ</li>
        </ul>
        </li>
        </ul>
        <h3>spacetime</h3>
        <p>React とは無関係だがよく使うので <a href="https://github.com/spencermountain/spacetime">spacetime</a> も紹介する。</p>
        <p>いわゆる date-fns のような時間操作系のライブラリ。</p>
        <p>軽量、直感的な関数、機能が豊富なので気に入っている。知名度が低いのが残念だ。</p>
        <h3>ky</h3>
        <p><a href="https://www.npmjs.com/package/ky">ky</a> は <a href="https://www.npmjs.com/package/axios">axios</a> の代替ライブラリ。</p>
        <p>Denoでも使えるのが良い。</p>
        <p>正直この手のやつはあまり使う必要がない（fetchで十分）と思うのだが、たまにあると便利なので一応使っている。</p>
        <h3>Tanstack Query</h3>
        <p><a href="https://tanstack.com/query/latest">Tanstack Query</a> も有名なやつだが、 SPA 開発ではほぼ必須のライブラリ。</p>
        <p>API 通信をキャッシュしたり、データ取得中の loading status を管理したりできる超便利なやつ。</p>
        <p>リロード機能がいい感じなのが最高。</p>
        <p><a href="https://jotai.org/docs/extensions/query">jotai-tanstack-query</a> も結構頑張って使っていたのだが、
        ちょっともう一歩なところがあって結局 Tansatack Query をそのまま使うほうがよいという結論になった。</p>
        <h3>qs</h3>
        <p><a href="https://www.npmjs.com/package/qs">qs</a> もあまり React は関係ないが URL の Search Parameters をいい感じに encode/decode できるやつ。</p>
        <p>ルーティングライブラリにこの手の機能がくっついている場合もあるけど、 qs のほうが小回りがきいて便利なことが多いので、
        ルーティングは前述の Wouter くらいシンプルにしておいて qs で補うほうが好みだ。</p>
        <h3>vitest, happy-dom</h3>
        <ul>
        <li><a href="https://vitest.dev/">vitest</a></li>
        <li><a href="https://github.com/capricorn86/happy-dom">happy-dom</a></li>
        </ul>
        <p>テストライブラリ。</p>
        <p>速い。書き心地に変なクセがない。以上</p>
        <h3>Biome</h3>
        <p><a href="https://biomejs.dev/">Biome</a> は Linter と Formatter の機能を併せ持つ爆速なやつ。</p>
        <p>Biome に比べれば ESLint や Prettier は遅くて使いたくない。</p>
        <p>Biome のデフォルトのフォーマットにやや癖があるが、自分としては Linter や Formatter というのは
        「あればそれでいい」という程度のこだわりしかなく特に不満なし。</p>
        <p>色々カスタマイズしたい人は ESLint のほうがいいと思う。</p>
        <p>残念なのは対応している言語が基本的に JS/TS/JSX/TSX/JSON/JSONC のみということ。
        Markdown や CSS も対応してくれると嬉しいのだが。。。</p>
        <p>少なくとも React + Chakra UI の世界にいる限り生 CSS は書かなくてもいいので Biome で十分である。</p>
        <h3>lefthook</h3>
        <p>git hook をかきやすくするやつ。</p>
        <p>チーム開発のときに Linter / Formatter / Test あたりは必ずパスしてからコミットしてほしいという気持ちがあり、
        そういう設定を強要するために lefthook など入れてみるのだが、まぁ、だいたい抜け道を使われて徒労に終わる。。。</p>
        <h2>UI の話</h2>
        <h3>Chakra UI</h3>
        <p>最近は UI 作りは <a href="https://v2.chakra-ui.com/">Chakra UI</a> 1択と思っている。
        <a href="https://www.kuma-ui.com/">Kuma UI</a> も思想は悪くないのだが、コンポーネントが少なすぎる。</p>
        <p>Chakra UI にはだいたい使いたいコンポーネントが揃っているし、思想的にも使いやすい。</p>
        <p>Tailwind css の良いところを取り込みつつ、悪いところは排除した感じが実に良い。</p>
        <h4>ローディング UI を考える</h4>
        <p>Chakra UI にあるローディングで使えそうなコンポーネントが次。</p>
        <ul>
        <li><a href="https://v2.chakra-ui.com/docs/components/progress#animated-progress">Progress bar</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/progress-bar.gif" alt="progress-bar"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/skeleton">skeleton</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/skeleton.gif" alt="skeleton"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/spinner">spinner</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/spinner.gif" alt="spinner"></li>
        </ul>
        </li>
        </ul>
        <p>最近良く見かける UI としてロード中に Progress bar がヘッダーとかページのトップにあるやつ。
        なんとなくロード中というのがわかりやすいので導入したい。</p>
        <p>Skeleton も私としてはあまり使ってこなかったのだが、Amazonとか見てるとかなり使われている。
        ロード中なんだけど早く画面が表示されたように錯覚させる良いUIだと思う。</p>
        <p>逆に Spinner はいかにも「ロード中ですよ」という感じで、案外多用しないほうがいい気がする。
        本当にロードに時間がかかるような場合とかのみにしたほうがいいんじゃないかなぁ。</p>
        <p>こういうのは本職のデザイナーの意見も聞きたいところ。</p>
        <p><strong>(追記)</strong></p>
        <p><a href="https://www.npmjs.com/package/holy-loader">holy-loader</a> という便利なライブラリを見つけた。
        導入するだけで画面遷移の時ヘッダーにローディングUIを表示することができる。良さそう。</p>
        <h4>Chakra UI にないコンポーネントを補う</h4>
        <p>少々意外なことに Chakra UI には date-picker や select2 的なコンポーネントがない。
        正直これらは <code>&lt;input type=&quot;datetime-local&quot; &gt;</code> や <code>&lt;datalist&gt;</code> で十分なケースも多いのだが、
        もう少し機能のある UI が求められるケースもある。</p>
        <p>そういう場合には <a href="https://blueprintjs.com/">Blueprint</a> を使うようにしている。</p>
        <h3>Blueprint</h3>
        <p><a href="https://blueprintjs.com/">Blueprint</a> は業務アプリをつくるのに向いたUIを提供している。
        デザイン的に Chakra UI のポップな感じと合わないのだが、ちょうど Chakra にないコンポーネントがあるので使っている。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409091131/blueprint.png" alt="blueprint"></p>
        <h4>テーブルUIを考える</h4>
        <p>Blueprint の良い点はテーブルUIが非常によくできている。
        ドキュメントが読みづらくGitHubのサンプルコードを読むのが一番良いのだが、Excelライクなテーブルが作れる。</p>
        <p>未だに「ExcelみたいなUIが欲しいです」という要望は時々あるので Blueprint はよい。</p>
        <p><a href="https://tanstack.com/table/latest">Tanstack Table</a> と組み合わせると更に良い。
        これはテーブルのUIとデータを分けて考えることができるようになるライブラリ。
        地味に困る部分なのでしっかり作ってあって良いライブラリだと思う。
        ソートやページネーションもあるので助かる。</p>
        <h3>AutoAnimate</h3>
        <p><a href="https://auto-animate.formkit.com/">AutoAnimate</a> は一覧とかで自動的にそれっぽいアニメーションを付けてくれるライブラリ。
        一覧画面での追加、削除、移動のとき要素にちょっとアニメーションを付けてくれる。
        あんまこだわりなくそれっぽいアニメーションがほしいときにCSSとかで頑張るより楽。</p>
        <p>何度か使っているけど、 Chakra UI にも <a href="https://v2.chakra-ui.com/docs/components/transitions">Transitions</a> という
        アニメーション関係のコンポーネントがあることに気がついたのでこっちでも十分かもしれない。</p>
        <h3>その他、過去に紹介した UI ライブラリ</h3>
        <ul>
        <li><a href="https://www.kbaba1001.com/posts/202408290945_dnd-on-list">タスクリストみたいなやつを楽にDnDするやつ</a></li>
        <li><a href="https://www.kbaba1001.com/posts/202408290953_full-calendar/">カレンダーUIが必要な時使うやつ</a></li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Mon, 09 Sep 2024 11:31:14 GMT</pubDate>
    </item>
    <item>
      <title>スツールをDIYした</title>
      <link>https://www.kbaba1001.com/posts/202409021001_diy-stool/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409021001_diy-stool/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202409021001/stool.jpg" alt="stool"></p>
        <p>タイトルの通りで上記のスツールを自作してみた。</p>
        <p>木を切って革の部分も貼った。</p>
        <h3>デザイン案</h3>
        <p><img src="https://www.kbaba1001.com/img/posts/202409021001/design1.jpg" alt="design1"></p>
        <p>はじめは上記のように１本脚で考えていたが、
        家具なども作っている大工さんに相談したところ
        柱と面の接地面積を増やした方が良いとのことで
        次のデザインになった。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409021001/design2.jpg" alt="design2"></p>
        <p>作業工数は増えたがデザインも格好良くなり満足している。</p>
        <h3>革貼り</h3>
        <p>今回のチャレンジは革貼り。練習用に合皮を使った。
        合皮は百均で330円で売っていた。やすい。</p>
        <p>家具に革を貼るやり方についてはYoutubeで調べたが、
        やはりあまりやっている人は多くなくて、
        工場とかでソファを作っている動画を参考にした。</p>
        <p>革の裏面に接着剤をつけてかなり革を伸ばしながら貼る
        というやり方のようだ。
        革はタッカーで木材と固定した。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 02 Sep 2024 10:01:18 GMT</pubDate>
    </item>
    <item>
      <title>カレンダーUIが必要な時使うやつ</title>
      <link>https://www.kbaba1001.com/posts/202408290953_full-calendar/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408290953_full-calendar/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202408290953/full-calendar.png" alt="Full Calendar"></p>
        <p><a href="https://fullcalendar.io/">Full Calendar</a> を使ってくれ。</p>
        <p>React 以外にも生 JS でも使えるようにできている。最高。</p>
        <p>以上。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 29 Aug 2024 09:53:21 GMT</pubDate>
    </item>
    <item>
      <title>タスクリストみたいなやつを楽にDnDするやつ</title>
      <link>https://www.kbaba1001.com/posts/202408290945_dnd-on-list/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408290945_dnd-on-list/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://user-images.githubusercontent.com/2182637/53614150-efbed780-3c2c-11e9-9204-a5d2e746faca.gif" alt="@hello-pangea/dnd"></p>
        <p>こういうやつを React で楽にやりたい。</p>
        <p>というわけで見つけたのが <a href="https://www.npmjs.com/package/@hello-pangea/dnd">@hello-pangea/dnd</a></p>
        <p>もちろん他にも汎用的な DnD ライブラリはあったけど、リストの DnD はこれが一番楽そうだった。</p>
        <p>ただ、ドキュメントが少なすぎる。。。</p>
        <p>実質サンプルしか役に立たないので <a href="https://github.com/hello-pangea/dnd/blob/HEAD/docs/about/examples.md">これ</a> を見る。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408290945/dnd.png" alt="サンプルコード"></p>
        <p>とはいえ、３つのコンポーネント差し込むだけで簡単に DnD できるようになったので非常に良かった。
        これくらいの手間で DnD ができるなら積極的に使おうという気持ちになる。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 29 Aug 2024 09:45:55 GMT</pubDate>
    </item>
    <item>
      <title>Ollama と Open WebUI でローカルLLMを動かす</title>
      <link>https://www.kbaba1001.com/posts/202408280721_ollama-open-web-ui/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408280721_ollama-open-web-ui/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://github.com/kbaba1001/ollama_and_open-webui_sample">ollama_and_open-webui_sample</a></p>
        <p>こんなリポジトリを作ってみた。</p>
        <ul>
        <li><a href="https://github.com/ollama/ollama">Ollama</a>
        <ul>
        <li>いろいろな LLM モデルを同じインタフェースで動かせるようにするためのサーバー</li>
        <li>llama-cpp-python と似たようなものという理解</li>
        </ul>
        </li>
        <li><a href="https://github.com/open-webui/open-webui">open-webui</a>
        <ul>
        <li>ollama の web ui</li>
        <li>ChatGPT っぽい画面が立ち上がる</li>
        </ul>
        </li>
        <li><a href="https://huggingface.co/elyza/Llama-3-ELYZA-JP-8B-GGUF">elyza/Llama-3-ELYZA-JP-8B-GGUF</a>
        <ul>
        <li>llama 3 ベースで ELYZA が日本語対応してくれたモデル。</li>
        <li>8B なので家庭用のグラボでも動かせる（目安としては 8B なら 8GB 以上の RAM を積んだグラボ）</li>
        </ul>
        </li>
        </ul>
        <p>今までの実験から ELYZA のモデルは信用しているので Llama3 対応モデルはありがたい。</p>
        <p>動かしてみた様子はこんな感じ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408280721/llama3-elyza-1.png" alt="スクショ1"></p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408280721/llama3-elyza-2.png" alt="スクショ2"></p>
        <p>やはり llama2 系に比べると段違いに賢い。会話が成り立っている。</p>
        <p>画像生成っぽいことをしてほしいという無茶ぶりにもなんとか答えていていじらしい。</p>
        <p>ローカルLLMは面白いのでなんかもっと活用できないか考えたいところ。
        codellama というのもあるので vs code と組み合わせて使っても良さそう。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 28 Aug 2024 07:21:23 GMT</pubDate>
    </item>
    <item>
      <title>LumeCMSでブログを作ってみた</title>
      <link>https://www.kbaba1001.com/posts/202408230722_made-a-blog-by-lume-cms/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408230722_made-a-blog-by-lume-cms/</guid>
      <content:encoded>
        <![CDATA[<p>以前からこのサイトの構築で使っている <a href="https://lume.land/">Lume</a> だが、最近 <a href="https://lume.land/cms/">LumeCMS</a> という CMS 機能を組み込むプラグインが出た。
        静的サイトジェネレーターで CMS というのも変な話なのだが、 LumeCMS と使うとブログなどのデータ更新のためのUI付き管理画面が作れるようだ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408230722/lume-cms-posts.png" alt="LumeCMSの管理画面"></p>
        <p>管理画面を色々設定するとこんな感じになる。
        タイトルと本文だけじゃなくてタグとか著者とか設定できるようにしてみた。便利。</p>
        <p>これらはデータとしては Deno KV や Githu API を使うこともできるし、 File System にそのまま markdown ファイルを生成することもできる。</p>
        <ul>
        <li><a href="https://magazine.neumann.tokyo/">今回作成したブログ</a></li>
        </ul>
        <h3>サーバー環境</h3>
        <p>今回は LumeCMS を自宅サーバーで動かすことにした。
        次のような感じ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408230722/lume-cms-infra.png" alt="LumeCMSのインフラ環境"></p>
        <p>黄色は docker container で、3つの Conatiner が docker compose で動いている。</p>
        <p>LumeCMS はアプリケーションサーバーとして動かしておいて、 Caddy でリバースプロキシして外部から見れるようにしておく。
        これは Caddy の Port で <a href="http://localhost:8080/admin">http://localhost:8080/admin</a> みたいなパスに対してリバースプロキシすることで、</p>
        <ul>
        <li><a href="http://localhost:8080/admin">http://localhost:8080/admin</a> は管理画面</li>
        <li>それ以外の <a href="http://localhost:8080/">http://localhost:8080/</a> は静的サイトで生成されたホームページ</li>
        </ul>
        <p>という動きを作りたかったため。</p>
        <p>Lume の builder を <code>deno task lume build -w</code> みたいな感じで動かしておけばファイルの変更があったときに
        自動でビルドをやり直して結果である <code>_site</code> を作れるので、 LumeCMS でファイルを作った際もこの自動ビルドが走る。</p>
        <p><code>_site</code> を Caddy で静的コンテンツとして配信すれば速いし、 Caddy のロードバランサとしての恩恵にあやかれる。</p>
        <p>Docker の中では 80 Port で Caddy を動かす必要がある。これは http で動かすためで、 Caddy は 80 以外は自動的に https になる。
        Docker の外から Port Foward するときに 80 をホストの 8080 からアクセスできるようにしておく（この Port は何番でも良い）。</p>
        <p>8080 Port に対して <a href="https://github.com/fatedier/frp">Frp</a> を使って Tunneling することで https 化と外部への公開を行う。
        frp についての詳細は <a href="https://www.kbaba1001.com/posts/2024022301_frp/">frp で自宅サーバーを公開する</a> を参照。
        frp を用意するのが面倒くさかったら ngrok とか cloudflare tunnel とか使えば良い。</p>
        <h3>雑感</h3>
        <p>色々 CMS で良いのがないか調べたけど、機能少なくていいからサクッと使えるやつっていうのがなかなか無かった。
        どれも「カスタマイズバリバリできます！（ただしドキュメントをよく読んでね）」みたいなのが多くてイマイチだったので、
        使い慣れている Lume に CMS 機能が組み込めるのは割りと助かった気がする。</p>
        <p>もっと本格的な CMS が欲しい人には不十分だと思うけど、ちょっとしたブログを作るくらいならこれで良さそう。</p>
        <h3>Lume の他のプラグイン</h3>
        <p>今回はなるべく Lume のプラグインを使って og image とか整えるようにした。</p>
        <ul>
        <li><a href="https://lume.land/plugins/metas/">metas</a>
        <ul>
        <li>メタタグを管理しやすくするやつ</li>
        </ul>
        </li>
        <li><a href="https://lume.land/plugins/og_images/">og image</a>
        <ul>
        <li>og:image をタイトルなどから自動生成するやつ</li>
        <li><a href="https://github.com/vercel/satori">satori</a> を使っていて案外使い勝手が良かった</li>
        </ul>
        </li>
        <li><a href="https://lume.land/plugins/pagefind/">pagefind</a>
        <ul>
        <li>記事を検索できるやつ</li>
        </ul>
        </li>
        </ul>
        <p>Lume はどれも使い方のドキュメントが不十分で苦労するけど、頑張ればうまく使える。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 23 Aug 2024 07:22:57 GMT</pubDate>
    </item>
    <item>
      <title>自宅同人誌印刷を支える環境</title>
      <link>https://www.kbaba1001.com/posts/202408161040_selfbuild-books-environment/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408161040_selfbuild-books-environment/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202408161040/printer.jpg" alt="printer"></p>
        <p>自宅（ノイマントーキョー本社）で同人誌を作成している。これには２台のプリンターを使っている。</p>
        <ul>
        <li>A4 モノクロレーザープリンター</li>
        <li>A3 カラーインクジェットプリンター</li>
        </ul>
        <p>この辺の装備は４年くらい前に買ったものだが、最近のレーザープリンターは本当に値段が下がっていて、
        今調べたら A3 カラーレーザーでも 6 万くらいであった。いい時代だ。</p>
        <p><a href="https://amzn.asia/d/4BGhG7q">キヤノン　A3 カラーレーザープリンター　LBP841CS  56,249 円</a></p>
        <p>レーザープリンターは圧倒的にたくさん印刷できるので、インク単価が安くてたまに交換するだけで良い。
        モノクロでも割と十分で仕事の書類や同人誌印刷でも活躍している。</p>
        <p>自宅同人誌といえども表紙に使う紙は少し良いものをつかっている。135kg上質紙とかクラフト紙とか。
        クラフト紙はレーザーと相性が悪くて少しこすれてしまったので、インクジェットで印刷するようにした。</p>
        <p>この結果できたのがこれらの本（真ん中は印刷所で作ったやつ。）</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408161040/books.jpg" alt="books"></p>
        <p>自宅印刷の場合、印刷所に出すよりはかなり安く作ることができる。
        もちろん手作業で製本する手間はあるし、印刷所で作るほど整った本にはならないけど、
        画質とかはデータを気をつければ十分な気がする。</p>
        <h3>サークルの表札</h3>
        <p><img src="https://www.kbaba1001.com/img/posts/202408161040/nameplate.jpg" alt="nameplate"></p>
        <p>こんなものを作ってみた。木のプレートにはんだごてでウッドバーニングしてサークル用の表札（看板）を作った。
        ウッドバーニングは結構便利な技術で、簡単な割に仕上がりが良い。
        今使っているのは電子工作用のはんだごてを限界温度の５００度くらいまで上げて使っているのだが、
        専用のものを買っても良い気がする。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 16 Aug 2024 10:40:19 GMT</pubDate>
    </item>
    <item>
      <title>積読を消化したい</title>
      <link>https://www.kbaba1001.com/posts/202408161007_I-want-to-read-books/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408161007_I-want-to-read-books/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202408161007/books.jpg" alt="books"></p>
        <p>なかなか忙しくて本を読めていないので、すっかり積読してしまっている。
        中には半分くらい読んでいるやつもあるが、まったく手を付けていないものもある。</p>
        <p>なんか Discord とかで読書会しても良いのかもしれない。</p>
        <p>やはり技術書が多いが、英語とかデザインの本もある。
        あと写真には写ってないけどヒンディー語と中国語の本とか。
        外国語の勉強ももっとやりたいけどなかなか時間がなぁ。。。
        TOEFLもやりたいけども。</p>
        <p>ゲームやアルゴリズム系の本はほとんど趣味だが、
        こういうのって読むだけでも楽しい。
        プログラミングを始めるならやはり簡単なゲームを作る
        ところからやるのが良いと思うのだが、最近は
        Unity とかが発達しているせいで逆にあんまライブラリ使わずに
        実装するのが減ってきているのがなんとなく残念だ。</p>
        <p>デザインは最近どうもワイヤーフレームなどを作る機会が増えているので、
        いっそデザインの知識をアップデートしたいという感じ。
        何度か自分でデザインやったほうがいいんじゃないかと思って勉強するのだが、
        いまいち実践となると知識を活かしきれていない気がする。
        というか、デザインの話は基本的に印刷物の話が多くて、
        Webデザインの話とはちょっと別な部分もあり、
        なんかちょっとつながっていない感じがする。
        Webデザインの話と言っても当然CSSとかの技術的な部分は理解しているわけで、
        なんかこう、UI/UXみたいな話が知りたいのかもしれない。</p>
        <p>一応色彩検定３級を昔取ったのだが、だいぶ知識を忘れているので教科書を買い直した。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 16 Aug 2024 10:07:03 GMT</pubDate>
    </item>
  </channel>
</rss>