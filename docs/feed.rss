<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>ハッカーと漫画家</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>FAM設計方針変更</title>
      <link>https://www.kbaba1001.com/posts/202406141438_change-FAM-system-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202406141438_change-FAM-system-design/</guid>
      <content:encoded>
        <![CDATA[<p>少しずつ個人開発しているシステム FAM についての大まかな設計は
        <a href="https://www.kbaba1001.com/posts/2024020601_deno/">Deno で Google Meet みたいなやつを作ってみようと思っている</a>
        に書いたとおりなのだが、若干方向性を修正することにした。</p>
        <h2>なるべく PostgreSQL を使う</h2>
        <h3>全文検索</h3>
        <p>TypeSense などの全文検索エンジンを使うことを考えていたが、なるべくインフラコストを下げる意味では依存するシステムは少ないほうがいい。
        基本的にオンプレでの運用を考えているけど、一応クラウドで動かす場合のコストを考えてのこと。</p>
        <p>そのため PGroonga で全文検索を行う方針に考え直した。
        <a href="https://supabase.com/">Supabase</a> であればクラウドでも動くので、基本的にクラウドで動かす場合は Supabase 使ってくれという方針にした。</p>
        <p>どうしても AWS や GCP で動かしたい場合は PGroonga の代わりに bg_bigm などを使う選択肢があるが、これはオプションと言うか
        余力があれば対応くらいで優先度は下げる。</p>
        <h3>Stream にデータを読み書きする</h3>
        <p>PostgreSQL の LISTEN/NOTIFY を利用しようと思っている。</p>
        <p>参考: <a href="https://zenn.dev/micin/articles/postgresql-listen-notify">PostgreSQL LISTEN/NOTIFY, Goを利用したリアルタイム配信</a></p>
        <h3>Timescale DB はやめる</h3>
        <p>PostgreSQL で十分そうな気がするので。
        Supabase 前提なら PostgreSQL のほうが良かろう。</p>
        <h2>Strage として MinIO を使う</h2>
        <p>Strage は <a href="https://min.io/">minio</a> を docker で動かすことにした。
        これならクラウド化するときに Supabase Strage のような S3 互換のサービスが使えるし、もちろん S3 でも動く。</p>
        <p>結果的にサーバーサイドの docker compose ではアプリケーションサーバー本体、PostgreSQL、MinIO の３つが動く構成にした。</p>
        <h2>フロントエンドの変更</h2>
        <h3>Deno から Node に戻した</h3>
        <p>Deno + Vite + React 環境はなかなか難しい事がわかり、フロントは Node に戻した。</p>
        <ul>
        <li>NODE_ENV や process がないので React が production モードでしか動かず、デバッグがし辛い</li>
        <li>上記の理由で jsdom, happy-dom などを使ったテストが動かない</li>
        <li><code>import React from &quot;react&quot;</code> という書き方をしているコードが動かない
        <ul>
        <li>これは React 本体で export default が定義されてないので <code>import * as React from &quot;react&quot;</code> が正しい書き方なのだが、TS なのか Node なのかのコンパイラが気を利かせて動いているコードのようだ</li>
        <li>当然、 Deno ではエラーになる</li>
        <li>具体的には Tanstack query が動いてくれなかった</li>
        </ul>
        </li>
        <li><a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a> つらい
        <ul>
        <li>query の引数が atom で渡すしかないので同一ページに複数のコンポーネントがあり、その引数だけ変えたい場合に結構無理やりな方法でしか対処できない</li>
        <li>残念ながら Tanstack Query 直接使うほうが何かと楽ということがわかった</li>
        </ul>
        </li>
        <li><a href="https://www.kuma-ui.com/">Kuma UI</a> から <a href="https://v2.chakra-ui.com/">ChakraUI</a> へ
        <ul>
        <li>Kuma UI は理想的なのだが、もう少し機能が増えないとしんどい気がする</li>
        </ul>
        </li>
        <li>結局 jotai はグローバルステートの管理だけするようにしてあとは React Hook 系を使うようにした</li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Fri, 14 Jun 2024 14:38:37 GMT</pubDate>
    </item>
    <item>
      <title>Lumeで「ふきだし」を作る</title>
      <link>https://www.kbaba1001.com/posts/202405301700_fukidashi/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405301700_fukidashi/</guid>
      <content:encoded>
        <![CDATA[<p>《kbaba1001|/img/horse.jpg|Markdown中にこんな吹き出しを挿入できるようにしてみた》</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405301700/code.png" alt="code"></p>
        <p>Markdown 中に上記のような構文を書いておくと吹き出しを作れるようにした。</p>
        <p>どうやっているかと言うと、Lume の <code>_config.js</code> に次のようなコードを書いてある。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405301700/code2.png" alt="code2"></p>
        <p><a href="https://github.com/kbaba1001/kbaba1001.github.io/blob/main/_config.js">_config.js github</a></p>
        <p><code>page.content</code> にはレンダリングされる HTML が入っていてこれを上書きするという少々強引な方法で実装している。
        本当は markdown-it の plugin にするほうが行儀が良い。</p>
        <p><a href="https://github.com/kbaba1001/kbaba1001.github.io/blob/main/_includes/css/components/fukidashi.css">CSS が気になる方は github を参照して。</a></p>
        <p>《kbaba1001|/img/horse.jpg|今後も使っていくよ》</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 30 May 2024 17:00:51 GMT</pubDate>
    </item>
    <item>
      <title>同人誌の通信販売を開始しました</title>
      <link>https://www.kbaba1001.com/posts/202405301114_start-a-dojinshi-on-ec/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405301114_start-a-dojinshi-on-ec/</guid>
      <content:encoded>
        <![CDATA[<p>今まで書いた同人誌を通信販売するためのページを Base で作成しました。
        上記からご注文いただけたら私から発送しますので、ぜひお買い求めください。</p>
        <p><a href="https://neumann.base.shop/">ノイマンパブリッシング通販サイト</a></p>
        <p>またサークルの Instagram も始めましたのでよろしくお願いします。</p>
        <ul>
        <li><a href="https://www.instagram.com/neumann_tokyo_publishing/">Instagram - neumann_tokyo_publishing</a></li>
        </ul>
        <h2>Base になった経緯</h2>
        <p>《kbaba1001|/img/horse.jpg|一般向けの同人誌を売るためのプラットフォームがない！！》</p>
        <p>これにつきます。</p>
        <p>一応 <a href="https://booth.pm/ja">BOOTH</a> という pixiv 社がやっているサービスがあるんですが、</p>
        <ul>
        <li>ユーザーがあんま多くない気がする</li>
        <li>購入するのに pixiv のアカウントが必要なのがだるいと言う意見がある</li>
        </ul>
        <p>みたいなところが不満でやめました。
        一時期使ったこともあるんですが、手数料の安さとか在庫預かってくれるとかは嬉しいんですが、
        pixiv 自体の人気が以前ほど高くないことも考えるとあんま採用したくないなぁというのが本音。</p>
        <p>とくに、自分のやっている分野はエッセイ漫画であって、萌え萌えなオタクコンテンツってわけじゃないし。。。</p>
        <p>《妻:Assam|/img/ashley.png|FANZA とか DLSite はユーザー多いけどエロだけって感じだし。。。》</p>
        <p>《kbaba1001|/img/horse.jpg|いっそのこと通販サイトを普通に作るほうが良くね？》</p>
        <p>というわけで Base を活用することにしました。</p>
        <p>自分で PayPal とか Stripe とか使って EC サイトを作ることも考えましたが、
        特商法の表記とか利用規約とか整えるの面倒くさいのでそこは Base のような
        商品を売ることができるプラットフォームを使うことにしました。
        これならあまり手数料も取られないし。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 30 May 2024 11:14:58 GMT</pubDate>
    </item>
    <item>
      <title>DenoでHonoやReactを使ったテンプレートを作ってみた</title>
      <link>https://www.kbaba1001.com/posts/202405171328_deno-hono-react-template/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405171328_deno-hono-react-template/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202405171328/template.gif" alt="gif"></p>
        <p>Deno で本格的な Web システムを作るためテンプレートを作ってみた。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template">deno-vite-react-template</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template">deno-hono-api-template</a></li>
        </ul>
        <p>backend と frontend で完全に分かれていて RESTful API で通信するようにした。</p>
        <h2>仕様</h2>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template">deno-vite-react-template</a>
        <ul>
        <li>Deno, Vite, React による構成 (<a href="https://github.com/anatoo/vite-deno-plugin">vite-deno-plugin</a> を使った)</li>
        <li>Routing Library として <a href="https://github.com/molefrog/wouter">wouter</a></li>
        <li>UI Library として <a href="https://chakra-ui.com/">Chakra UI</a></li>
        <li>全体的に <a href="https://jotai.org/">jotai</a>, <a href="https://github.com/jotaijs/jotai-tanstack-query">jotai-tanstack-query</a> を活用してAPI通信のキャッシュなど行っている</li>
        <li><a href="https://www.npmjs.com/package/react-if">react-if</a> は便利なので皆使ってほしい</li>
        </ul>
        </li>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template">deno-hono-api-template</a>
        <ul>
        <li><a href="https://hono.dev/">Hono</a> による RESTful API サーバー
        <ul>
        <li>RPC も使いたかったけど今回は汎用性を考えて不採用</li>
        </ul>
        </li>
        <li>PostgreSQL</li>
        <li><a href="https://github.com/golang-migrate/migrate">migrate</a> によるマイグレーション管理</li>
        <li><a href="https://kysely.dev/">kysely</a> による SQL ビルディング
        <ul>
        <li>Deno でも <a href="https://github.com/RobinBlomberg/kysely-codegen">kysely-codegen</a> がなんとか動いた</li>
        </ul>
        </li>
        <li><a href="https://deno.land/x/djwt@v3.0.2">djwt</a> による JWT 認証</li>
        <li><a href="https://github.com/aaronhuggins/deno_mocha">deno_mocha</a> によるテスト
        <ul>
        <li>deno test では afterAll などにバグがあったため</li>
        </ul>
        </li>
        <li><a href="https://zod.dev/">zod</a> によるバリデーション</li>
        </ul>
        </li>
        <li>共通
        <ul>
        <li>VS Code Devcontainer で開発できるようにしてある</li>
        <li>Linter, Formatter に <a href="https://biomejs.dev/">Biome</a> を使用。 Biome は速くてよい</li>
        <li><a href="https://github.com/spencermountain/spacetime">spacetime</a> 便利</li>
        </ul>
        </li>
        </ul>
        <h2>機能</h2>
        <ul>
        <li>email/password によるサインイン</li>
        <li>多言語対応 ( i18n )</li>
        <li>タイムゾーンや日付の表示形式の変更</li>
        <li>ダークモード</li>
        <li>認可 (Roles, Permissions)</li>
        <li>Todo リスト (CRUD のサンプルとして)</li>
        <li>招待 URL によるサインアップ</li>
        <li>各種テスト (frontend 側が途中)</li>
        </ul>
        <h2>設計的な部分</h2>
        <h3>email/password によるサインイン</h3>
        <p>JWT による email / password サインイン。
        特筆することはないけど、 <a href="https://hono.dev/middleware/builtin/jwt">Hono の middleware の jwt</a> がなんとなく使いづらかったので
        <a href="https://deno.land/x/djwt@v3.0.2">djwt</a> というライブラリで自作した。
        djwt はシークレットキー以外にも公開鍵秘密鍵での JWT の sign/verify が出来たのでそれを採用してみた。</p>
        <p><a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/tools/generate-jwt-key.ts">generate-jwt-key.ts</a> を用意したのでこれで鍵が作れる。</p>
        <h3>多言語対応 ( i18n )</h3>
        <p>色々ライブラリを調べたけど、結果的には jotai を活用して単語帳を作ることにした。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/atoms/i18n/japanese-messages.ts">英語日本語の対応表</a></li>
        </ul>
        <p>この単語帳を次のコンポーネントで扱えるようにする</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/trans.tsx">Trans</a></li>
        </ul>
        <pre><code class="language-js">&lt;Trans&gt;Hello&lt;/Trans&gt;
        </code></pre>
        <p>みたいにすると単語帳に <code>Hello</code> に対する単語があれば日本語に変換してくれるし、なければ英語のまま表示する。</p>
        <p>一応、 <a href="https://www.npmjs.com/package/fast-printf">printf</a> のフォーマットで変数も埋め込めるようにした。</p>
        <h3>タイムゾーンや日付の表示形式の変更</h3>
        <p>これもライブラリを使わず自作。</p>
        <p><a href="https://github.com/spencermountain/spacetime">spacetime</a> にタイムゾーン変換やフォーマット機能があるので
        その入力方式をフロント側で設定してバック側でDBに保存するというシンプルな方式。</p>
        <p>これも便利コンポーネントを用意しておいた。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/datetime-format.tsx">datetime-format.tsx</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/datetime-format-select.tsx">datetime-format-select.tsx</a></li>
        <li><a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/timezone-select.tsx">timezone-select.tsx</a></li>
        </ul>
        <h3>ダークモード</h3>
        <p><a href="https://chakra-ui.com/">Chakra UI</a> のダークモード機能に乗っかっているが、これは Cookie とかに記録する方式なので DB 保存でも良い気がする。</p>
        <h3>認可 (Roles, Permissions)</h3>
        <p>認可も最近はライブラリを使わず DB のテーブル構成でなんとかしている。</p>
        <p><a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/db/migrations/2024022701_initialize.up.sql">マイグレーションファイル</a> をみると DB
        の作りがわかると思うのだが、</p>
        <p>users -&gt; users_roles -&gt; roles -&gt; roles_permissions -&gt; permissions</p>
        <p>というリレーションがある。
        機能名を permissions テーブルに設定しておいて、それを roles に割り当てる。
        users には roles を割り当て、 permissions は直接見ないようにする。
        これにより、「ユーザーにはロールを割り当てる」「ロールには権限を割り当てる」という構造ができ、
        認可を管理しやすくなる。</p>
        <p>これは UI を見たほうがわかりやすいかもしれない。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/users_roles.png" alt="users_roles">
        <img src="https://www.kbaba1001.com/img/posts/202405171328/roles_permissions.png" alt="roles_permissions"></p>
        <p>サーバー側では次のように <a href="https://github.com/neumann-tokyo/deno-hono-api-template/blob/main/src/middleware/permission-checker.ts">permissionChecker</a> という middleware で permission 名を指定しておいて、 サインイン中のユーザーがその permission を持っていなければ機能が使えないようにしている。</p>
        <pre><code class="language-js">app.post(&quot;/&quot;, permissionChecker(&quot;todos&quot;), async (c) =&gt; {
        //...
        })
        </code></pre>
        <p>フロント側も <a href="https://github.com/neumann-tokyo/deno-vite-react-template/blob/main/src/components/can.tsx">Can</a> というコンポーネントで同じようなことができるようにした。</p>
        <h3>Todo リスト (CRUD のサンプルとして)</h3>
        <p>CRUD のサンプルのつもりで簡単な TODO リスト機能を作っておいたけど、結構認可とかユーザー設定のほうも
        CRUD が多くなったのでそっち見たほうがいいかもしれない。</p>
        <h3>招待 URL によるサインアップ</h3>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/invitations.png" alt="invitations"></p>
        <p>discord みたいにトークン付きの URL からサインアップできるようにしてある。</p>
        <p>「コピー」ボタンをクリックすると招待URLをコピーできて、これを招待したい人に渡す。</p>
        <p>トークンが有効であれば、サインアップ画面が出てくる。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405171328/sign_up.png" alt="sign up"></p>
        <h3>各種テスト (frontend 側が途中)</h3>
        <p>サーバー側は models と routes のテストを書いてある。</p>
        <ul>
        <li><a href="https://github.com/neumann-tokyo/deno-hono-api-template/tree/main/test">test</a></li>
        </ul>
        <p>Deno の標準の Test 機能で十分かと思ったが AfterAll 系の callback 処理で不具合があって、
        async がからむとうまく動かなかったので、 <a href="https://github.com/aaronhuggins/deno_mocha">deno_mocha</a> を使うことにした。
        今のところ大丈夫そう。</p>
        <p>frontend 側のテストも <a href="https://vitest.dev/">vitest</a> + <a href="https://github.com/capricorn86/happy-dom">happy-dom</a> で作るつもりだが、まだ出来ていない。</p>
        <h2>まとめ</h2>
        <p>今後の開発でよく使うであろう機能をとりあえずテンプレートに出来たのは役に立ちそうだ。
        色々とオレオレな仕様なので他の人は使いづらいかもしれないが、適当に改造して使ってほしい。</p>
        <p>具体的な動かし方とかはもう少し README あたりに記載が必要だと思うので追々対応する予定。</p>
        <p>Deno, Hono, Vite, あたりの組み合わせた動かし方は本当に資料が少なくて、今回の
        テンプレート公開が誰かの役に立ったら嬉しい。</p>
        <p>私は個人的に作っている FAM というシステム (Discord クローンみたいなもの) で
        このテンプレートを活用していくつもりだ。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 17 May 2024 13:28:54 GMT</pubDate>
    </item>
    <item>
      <title>FAM開発。多言語対応とか</title>
      <link>https://www.kbaba1001.com/posts/202405131843_developing-fam-about-i18n-etc/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405131843_developing-fam-about-i18n-etc/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno">前回</a> に引き続き Deno でシステムを作っている。
        まだ準備段階だがこのシステムを FAM と呼んでいる。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405131843/todo.gif" alt="TODO"></p>
        <p>今回実装した機能:</p>
        <ul>
        <li>多言語対応 (i18n)</li>
        <li>タイムゾーンの変更</li>
        <li>日付の表示フォーマットの変更</li>
        <li>ダークモード対応</li>
        <li>簡単なTODOリスト (CRUD のサンプルとして)</li>
        </ul>
        <p>ソースコードの公開はまだしてないけど後日行う予定。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 13 May 2024 18:43:18 GMT</pubDate>
    </item>
    <item>
      <title>Denoでシステムを作り始めた</title>
      <link>https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405102219_start-to-make-a-system-by-deno/</guid>
      <content:encoded>
        <![CDATA[<p>とりあえずサインイン機能だけ出来た。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405102219/sign-in-user.gif" alt="進捗"></p>
        <p>今回は</p>
        <ul>
        <li>Backend: Deno + Hono</li>
        <li>Frontend: Deno + Vite + React</li>
        <li>言語: TypeScript</li>
        </ul>
        <p>という構成。</p>
        <p>ドキュメントが少なくてハマることが多い。
        試しに使ってみたライブラリが Deno でうまく動かなかったりとかも若干ある。</p>
        <p>まだまだ Deno は縛りプレイっぽさがあるけど、 Web 標準はありがたいし速いしなんとか使いこなしたい。</p>
        <p>ソースコードは後日公開する予定。
        動画でちらっと見えてるけど、まだ初期の部分なのでテンプレートとして作っていて、
        他でも使い回せるようにしている。
        サインイン機能 + 簡単な TODO リストの CRUD くらいまで作っておくつもり。
        そのくらいあればサンプルとしては十分だろう。</p>
        <p>サーバー側では PostgreSQL + Kysely 構成もあり、結構実践的な作りになっている。</p>
        <p>Hono の RTC で色々楽をしたかったけど、なんかかえって面倒くさい気がしたのでいったんただの REST にしている。
        そうなると Swagger とか若干欲しくなるなぁ。。。
        <a href="https://github.com/scalar/scalar/tree/main/packages/hono-api-reference">hono-api-reference</a> この辺が便利かもなぁ
        あるいは <a href="https://github.com/honojs/middleware/tree/main/packages/trpc-server">tRPC</a>。</p>
        <p>まぁこういうのはある程度出来てからでもいい気もする。
        公開用の API と内部用の API は別だろうし。</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 10 May 2024 22:19:26 GMT</pubDate>
    </item>
    <item>
      <title>Podcastでネパールインターン受け入れのこと等を話しました</title>
      <link>https://www.kbaba1001.com/posts/202405081003_podcast-about-nepal-internships/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405081003_podcast-about-nepal-internships/</guid>
      <content:encoded>
        <![CDATA[<iframe src="https://podcasters.spotify.com/pod/show/nomadineers/embed/episodes/Nomadineers18--wbaba-san-e2jbbgh/a-ab88p73" height="102px" width="400px" frameborder="0" scrolling="no"></iframe>
        <p><a href="https://podcasters.spotify.com/pod/show/nomadineers">Nomadinners のPodcast</a>
        で１時間半くらい近況とか
        ノイマントーキョー株式会社で行っていたネパール人をインターンとして受け入れていた頃の話とかをしました。</p>
        <p>ネパールインターンについては０から始める外資企業という感じでなかなか楽しかったですが、あまり利益には繋がらなかったですね。。。
        いろいろな意味で勉強にはなりました。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 08 May 2024 10:03:04 GMT</pubDate>
    </item>
    <item>
      <title>コミティア149にサークル参加申し込みしました</title>
      <link>https://www.kbaba1001.com/posts/202405080932_comitia-149/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405080932_comitia-149/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202405080932/circle-cut.png" alt="サークルカット"></p>
        <p>2024年8月18日開催予定の <a href="https://www.comitia.co.jp/">コミティア149</a>
        に参加申込しました。
        まだ当選するかどうかわかりませんが、当選すれば上記のサークルカットで参加します。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202405080932/language.png" alt="らんげ～じ！"></p>
        <p>上記の、言語学習や海外交流などをテーマに妻と私の二人で描いた 104
        ページのエッセイ漫画本が出ます。
        こちらは原稿は完成していて入稿間際なので確実に出ます。</p>
        <p>まだ開催日まで時間があるのでもう１、２冊くらい出したいところですね。</p>
        <p>通販や電子書籍化についてはまだ検討中なので後日ご案内します。</p>
        <h3>原稿の話</h3>
        <p>今回、原稿は基本的にアナログで作成しました。漫画原稿用紙を使って作成した後、写植のみパソコンでスキャンして行うという方式でした。
        エッセイ漫画なのでがっつりトーンを使うわけでもなく、あまりソフトにお金をかけたくないという理由もあり、このやり方で今後もやっていこうと思います。</p>
        <p>私は昔から GIMP と InkScape をがっつり使ってきたので今回もそれらを使っています。
        最近はフリーで使える漫画フォントなんかもあり、便利になってきた感じがします。</p>
        <p>表紙やサークルカットは完全に InkScape
        で作成しましたが、だいぶパスの扱いにも慣れてきました。
        ベクターデータだと拡大縮小とかが楽で印刷向きという気がします。</p>
        <p>GIMP も縦書きに対応してくれると嬉しいんですが。。。 Script-Fu
        というプラグインを作る機能は Lisp で書けるので今度挑戦してみるつもりです。
        漫画を書くために便利な機能をいくつか作れたらいいなぁ。</p>
        <ul>
        <li>縦書き</li>
        <li>トーン生成</li>
        <li>集中線ツール</li>
        </ul>
        <p>この辺があると嬉しいのだけども。他の人が作ったやつも参考にしたい。</p>
        <p><a href="http://reddog.s35.xrea.com/wiki/?CategoryGimpPlugin">http://reddog.s35.xrea.com/wiki/?CategoryGimpPlugin</a>
        このサイト参考になりそう</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 08 May 2024 09:32:36 GMT</pubDate>
    </item>
    <item>
      <title>ブログタイトル変更</title>
      <link>https://www.kbaba1001.com/posts/202405070712_change-blog-title/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202405070712_change-blog-title/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202405070712_change-blog-title.png" alt="ブログタイトル変更"></p>
        <p>ブログのタイトルを「kbaba1001ブログ」から「ハッカーと漫画家」に変更しました。</p>
        <p>Paul Graham 氏の
        <a href="https://shop.ohmsha.co.jp/shopdetail/000000001697/">ハッカーと画家</a>
        のオマージュです。 この本は Lisp
        好きな人は読んでいる人も多いと思いますが、私も例に漏れず好きですねぇ。 Paul
        Graham さんの皮肉たっぷりな所が良いし川合史朗さんの翻訳も素晴らしい。</p>
        <p>今後も漫画は描いていきたいのでハッカーと漫画家を名乗ることにしました。</p>
        <p>今後ともよろしくお願いします。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 07 May 2024 07:12:02 GMT</pubDate>
    </item>
    <item>
      <title>パワポで漫画を作る</title>
      <link>https://www.kbaba1001.com/posts/202404220805_power-point-commic/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202404220805_power-point-commic/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202404220805_power-point-commic.png" alt="パワポで漫画を作る"></p>
        <p>Power Point や google slide
        を使って漫画のプロットやネーム（ストーリーのメモ書き）を作っている。</p>
        <h2>プロット</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/202404220805/plot.png" alt="プロット"></p>
        <p>長い話を書くときはプロットを作ってからネームを作り、その後下書きやペン入れをするという3段階で書いている。</p>
        <p>プロットもパワポで作り、漫画の1ページを1スライドに割り当てるようにしている。
        これならプロットが出来た時点で全体のページ数もはっきりと分かり、絵以外の情報はすべて書くようにしている。</p>
        <p>スライドの箇条書き１行が漫画の１コマに相当するように文字を書いていく。
        そうするとネームを作るときはコマ割りや絵の構図を考えるだけで良くなる。</p>
        <h2>ネーム</h2>
        <p><img src="https://www.kbaba1001.com/img/posts/202404220805/name.png" alt="漫画ネーム"></p>
        <p>ネームもパワポで作る。手順としてはこんな感じ：</p>
        <ul>
        <li>スライドの用紙サイズを A4 サイズに設定する</li>
        <li>A4 の漫画原稿用紙をスキャンして、スライドの背景に設定する</li>
        <li>4 コマや 3 コマなどよく使うコマ割りをレイアウト機能に登録しておく (google
        slide にはこの機能なさそう)</li>
        <li>ネームを作る</li>
        <li>ネームが出来たら A4
        で印刷して、本番の原稿用紙やお絵かきソフトなどで漫画を書いていく</li>
        </ul>
        <p>Clip Studio
        という漫画を描くツールがあるのだが、自分の漫画はエッセイ漫画で絵がゆるいので、
        多機能なツールは必要なく、 Clip Studio のサブスク料金を払うには少し高い。</p>
        <p>パワーポイントや Gimp などを駆使してなるべくお金をかけずに漫画を作っている。</p>
        <p>パワーポイントはページの入れ替えもできるし、図形描画ツールも揃っているし、
        案外漫画を書くのに向いている。
        印刷所によってはパワポデータで入稿できる場所もある（画質はどうしても下がるけど）。</p>
        <h2>マンガ本編</h2>
        <p>漫画原稿用紙でアナログデータを作成し、PDFにまとめて入稿、みたいな事をしている。
        Adobe の PhotoShop や inDesign のデータのほうが画質が良いらしいのだが、 Adobe
        製品も高いので他の方法をしている。</p>
        <p>最近は <a href="https://vivliostyle.org/ja/">Vivliostyle</a> という CSS 組版できるツールを
        試そうと思っているが、原稿が忙しくてまだ出来ていない。 Vivliostyle で十分な画質
        がだせるならいいなぁ</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 22 Apr 2024 08:05:09 GMT</pubDate>
    </item>
  </channel>
</rss>