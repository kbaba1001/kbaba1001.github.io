<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>ハッカーと漫画家</title>
    <link>https://www.kbaba1001.com/</link>
    <atom:link href="https://www.kbaba1001.com/feed.rss" rel="self" type="application/rss+xml"/>
    <description>Clojure 好きなプログラマ kbaba1001 のブログ</description>
    <lastBuildDate>Sun, 17 Dec 2023 15:00:00 GMT</lastBuildDate>
    <language>ja_JP</language>
    <generator>Lume v2.0.1</generator>
    <item>
      <title>Squint で切り開く ClojureScript の新しい可能性</title>
      <link>https://www.kbaba1001.com/posts/202410130849_opening-up-new-possibilities-for-clojure-script-with-squint/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202410130849_opening-up-new-possibilities-for-clojure-script-with-squint/</guid>
      <content:encoded>
        <![CDATA[<p>少し前から <a href="https://github.com/squint-cljs/squint">Squint</a> という軽量な ClojureScript (CLJS) のコンパイラがあります。
        最近これで遊び始めたのでざっくり紹介したいです。</p>
        <p>《kbaba1001|/img/horse.jpg|TypeScriptと同程度の気楽さでClojureScriptを使いたい》</p>
        <p>簡単に言えばこれを叶えるための選択肢としての Squint です。</p>
        <h3>そもそも今までの CLJS と何が違うのか</h3>
        <p>今までの CLJS はこんな感じでした。</p>
        <ul>
        <li>Java の Clojure との高い互換性を重視</li>
        <li>CLJS の実行に Java が必要 (<a href="https://github.com/thheller/shadow-cljs">shadow-cljs</a>はだいぶ頑張ってこれをなくそうとしていたけど…)</li>
        <li>ビルドのアウトプットファイルが大きい
        <ul>
        <li>JS のデータ構造をそのまま使うわけではないので標準で色々入っている分重い</li>
        </ul>
        </li>
        <li>JS のデータ構造を使う場合には <code>#js</code> や <code>clj-&gt;js</code> などを使って変換する必要があった
        <ul>
        <li>これで困ることはあんまりなかったけど、初心者には分かりづらいポイントかも</li>
        </ul>
        </li>
        <li>Promise の扱いが微妙
        <ul>
        <li><a href="https://github.com/clojure/core.async">core.async</a> で十分なことは多いけど、 JS の Promise を使いたいケースも結構ある</li>
        <li>core.async の関数の戻り値が Promise ではないのがたまに辛い</li>
        </ul>
        </li>
        <li>package.json とかに書いたらいい感じにやってほしいけど、なんかごちゃごちゃする
        <ul>
        <li>shadow-cljs はだいぶ良かった</li>
        </ul>
        </li>
        <li>cljs 対応済みの clojure ライブラリが使える</li>
        </ul>
        <p>何度も言いますが Shadow-cljs は最高です。 npm で動くし、今までの ClojureScript のライブラリも使えます。
        難点を上げるとすれば、ビルドが遅くて重く、なんとなく気楽さに欠けることでしょうか。</p>
        <p>Vite などの JS 文化のビルドライブラリを使いたいというのが正直なところです。</p>
        <p>そこで、 Squint 。</p>
        <p>Squint は今までの Clojure(Script) との互換性を捨てる代わりに、</p>
        <ul>
        <li>JS のデータをそのまま使うことによるアウトプットの軽量化</li>
        <li>Promise, Async/Await のサポート</li>
        <li>JSX 対応</li>
        </ul>
        <p>などが入り、 vite などと組み合わせて使うことも出来るようになりました。</p>
        <p>なので</p>
        <p>《kbaba1001|/img/horse.jpg|今までの cljs は不要だけど、 js の資産を活用して cljs で開発したい》</p>
        <p>のような考えの人には向いていると思います。
        詳細は <a href="https://github.com/squint-cljs/squint?tab=readme-ov-file#differences-with-clojurescript">このへん</a> を読んでください。
        今までの CLJS との互換性を重視した <a href="https://github.com/squint-cljs/cherry">cherry</a> というプロジェクトもあります。</p>
        <h3>まずはサンプルコード</h3>
        <p><a href="https://github.com/neumann-tokyo/vite-preact-squint">vite-preact-squint</a></p>
        <p>vite, preact, squint で土台を作ってみた。まだ途中だけどとりあえず squint でビルドした jsx を vite で動かすところまではできた。</p>
        <p>vite squit plugin みたいなやつがあればよいのだが、そこまではまだできていないようで、
        <code>squint watch</code> で js/jsx ファイルを作ってそれを <code>vite</code> に食べさせるという動き。</p>
        <p>そうすると２つのプロセスを同時に起動する必要があり、やや面倒なので <a href="https://github.com/chrismytton/shoreman">Shoreman</a> という <a href="https://github.com/ddollar/foreman">Foreman</a> を shell に移植したやつをリポジトリ内に入れて使うことにした。
        (この辺はもう少しシンプルにできそうな気がするけど)</p>
        <p><a href="https://github.com/brandonstubbs/vite-plugin-squint">vite-plugin-squint</a> を作っている人もいたので、後で試す。</p>
        <h3>cljs で malli だけ使いたい</h3>
        <p><a href="https://github.com/metosin/malli">malli</a> は cljs で動的に typecheck が出来るライブラリで、
        <a href="https://github.com/clojure/spec.alpha">clojure/spec.alpha</a> の代わりによく使われている。</p>
        <p>malli の良いところはデータ構造で spec を定義できて、かつ、 Validation などでも使えることだ。</p>
        <p>TypeScriptのような型システムは別にいらないのだが、単に関数の引数として何を期待しているのかを
        明白にしておきたいときは結構あって、 Malli はそういうときにちょうどいい。</p>
        <h4>Squint で Malli は動かない。ではどうするか？</h4>
        <p>先ほど互換性の話をした通り Squint では普通の CLJS ライブラリは動かないので Malli も動かない。</p>
        <p>ではどうするか？ JS のライブラリで似たようなものを探すしかない。</p>
        <p>「引数に何を期待しているかを明記する」という目的であれば <a href="https://www.npmjs.com/package/prop-types">PropTypes</a> をまず思いついた。</p>
        <p>しかし、案の定 PropTypes は放置されていて、世の中的にはそういうのは「 TypeScript を使え」の一点張りになってしまっていた。
        PropTypes的なライブラリで代替品も見つからない。</p>
        <p>《kbaba1001|/img/horse.jpg|発想を変えよう》</p>
        <h4>Validation ライブラリを Spec 代わりに使う</h4>
        <p>Clojure には <code>pre</code>、 <code>post</code> という機能がある。
        関数の事前条件(<code>pre</code>)または事後条件(<code>post</code>)を設定して、条件を満たしていなければ例外を出すというものだ。</p>
        <p>Malli にせよ clojure/spec.alpha にせよ、静的な型チェックとは異なり、
        動的な型チェックというのは何かしらの方法で実行して確認する必要がある。</p>
        <p>方針としてはこうだ。</p>
        <ul>
        <li><code>pre</code> で validation チェックライブラリ ( <a href="https://zod.dev/">zod</a> や <a href="https://valibot.dev/">valibot</a> など ) を実行して引数のチェックをする</li>
        <li>この機構は本番モード(<code>NODE_ENV=production</code>)では無視する（必ずパスする）ようにする</li>
        <li>テストを活用する</li>
        </ul>
        <p>このやり方なら JS の新しいライブラリを使って Malli が行っているような動的な型チェックが出来る。</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 13 Oct 2024 08:49:58 GMT</pubDate>
    </item>
    <item>
      <title>CADをやり始めた</title>
      <link>https://www.kbaba1001.com/posts/202409280830_i-challenge-a-cad/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280830_i-challenge-a-cad/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://cadiy3d.com/wp/"><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D.png" alt="caDIY3D"></a></p>
        <p><a href="https://cadiy3d.com/wp/">caDIY3D</a> というソフトで CAD を始めてみることにした。</p>
        <p>自分でも意外なことに今まで CAD をやったことがない。
        DIY の設計図は斜視図で紙や iPad で書くことでなんとかしてきていた。</p>
        <p>だが、いい加減 CAD を覚えようと思った。
        世の中には CAD のソフトが有料・無料あわせてたくさんあるのだが、
        caDIY3D が次の点で良さそうだと思って試している。</p>
        <ul>
        <li>価格が安い (買い切りで1万円くらい)</li>
        <li>DIY に特化した機能がある
        <ul>
        <li>ホームセンターで売っているような材料で設計できる</li>
        </ul>
        </li>
        <li>設計を元に木取り図を自動生成してくれる
        <ul>
        <li>木取り図とは、作ろうとしているものに対してどの材料をどのくらい買えばいいかという図</li>
        <li>基本的にホームセンターで売っているものは 3～8フィートくらいなので、その範囲で材を切る必要がある</li>
        </ul>
        </li>
        <li>機能が限られている分、直感的な 3D の UI で設計可能</li>
        </ul>
        <p>たぶん 3D プリンターなどを使うのであれば <a href="https://www.autodesk.com/products/fusion-360/overview?term=1-YEAR&amp;tab=subscription">Fusion 360</a> のような大掛かりな CAD ソフトを使うほうがいいと思うけど、木工に関しては caDIY3D が良さそうだ。</p>
        <p>とりあえず 30 日トライアルをやっている。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-2.png" alt="caDIY3D-2"></p>
        <p>30分くらい使っただけで簡単な棚を設計できた。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-3.png" alt="caDIY3D-3"></p>
        <p>木取り図も自動生成できて最高。毎回これを頭で考えるのが若干大変だった。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280830/caDIY3D-4.png" alt="caDIY3D-4"></p>
        <p>木取り図から値段も計算してくれる。便利じゃん！</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 08:30:16 GMT</pubDate>
    </item>
    <item>
      <title>紙に書いた今年の日記が500ページくらいあってキモい</title>
      <link>https://www.kbaba1001.com/posts/202409280809_paper-diary/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280809_paper-diary/</guid>
      <content:encoded>
        <![CDATA[<p>皆さんは日記帳を持ってますか？</p>
        <p>私の日記帳はこんな感じです。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280809/diary2.jpg" alt="日記2"></p>
        <p><a href="https://www.kokuyo-st.co.jp/stationery/campus-notebinder/">コクヨ ノートのように使えるバインダー</a> に
        <a href="https://www.kokuyo-st.co.jp/stationery/looseleaf/b5.html">しっかり書けるA罫7mmドット入りルーズリーフ</a> を入れて、
        <a href="https://www.pentel.co.jp/products/ballpointpen/energel/">エナージェル</a>ボールペンやガラスペンで日記を書くのが好きだ。</p>
        <p>SNS をやめてから日記を1日２，３回くらい書くようになった。
        ネットに書けないことも紙には書けるし、炎上しないから気が楽だ。</p>
        <p>特に読み返すわけでもないのだが、書いた分は別の厚めのルーズリーフケースに移し替えている。</p>
        <p>で、その結果、今年の日記がこんな感じ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409280809/diary1.jpg" alt="日記1"></p>
        <p>分厚くてキモい。。。</p>
        <p>しかもだいたいどのページもぎっちり書いてある。</p>
        <p>読み返してみると、なんか常に色々やっててこの人忙しそうだなと思った。</p>
        <p>別に普通のことなんだけど「今日は通院の日だ」みたいな記述もあって、少し狂気じみている。</p>
        <p>最近では日記を売る人もいると聞いたことある。
        守秘義務に関わることや個人名とか除けば自分の日記も売れそうではある。。。
        あんまそういう気持ちじゃないけど</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 08:09:11 GMT</pubDate>
    </item>
    <item>
      <title>AIコンピュータについて</title>
      <link>https://www.kbaba1001.com/posts/202409280755_ai-computer/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409280755_ai-computer/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.contec.com/-/media/Contec/jp/news/2024/24091000/img_01.jpg" alt="DX-M2300"></p>
        <p><a href="https://www.contec.com/jp/news/2024/2024091000/">DX-M2300</a> という組み込み用のパソコンがあるらしい。
        組み込み用というのはようするに Raspberry Pi みたいなやつの超すごいやつということらしい。
        ロボットの制御なんかに使えるみたいなんだけど、 Jetson AGX Orin 64GB という CPU/GPU を搭載していて、
        VRAM 64GB ということなのでかなり処理性能が高い。</p>
        <p>最近のローカルLLM、例えば llama などでも 70B くらいのがあるわけだが、こういうのを動かす環境が結局
        H100 みたいな超高級(500万円くらい) なマシンしかないという状況は結構きつくて、
        DX-M2300 シリーズはオープン価格だがだいたい 40 万～ 100 万くらいのはずで、
        比較的手が出しやすい。</p>
        <p>むりにファンレスである必要はないと思うのだが（というかこのでかいヒートシンクつけるくらいならファンつけてくれたほうが。。。）、
        たぶんそこはロボットとして音を出したくないみたいな需要があるのだろう。
        たしかにドラえもんからファンの音がしていたら嫌だ。</p>
        <p>ただいまいちこのマシンの購入方法がわからない。
        代理店に問い合わせてくれとのことなのだが、１台だけの発注を受け入れているのかどうか。。。</p>
        <p>RTXシリーズがなかなか5000系がでなくて Nvidia がもう個人向けの GPU に興味なさそうな気がするので、
        Jetson シリーズにはちょっと期待している。</p>
        <p>とにかく VRAM が大きい GPU がそれなりの値段で欲しい。。。</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 28 Sep 2024 07:55:55 GMT</pubDate>
    </item>
    <item>
      <title>Web UIデザインの勉強をしている</title>
      <link>https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409100908_learning-ui-design/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202409100908/ui-design.jpg" alt="UI Design Books"></p>
        <p>前から持っていた本も含めて上記の本を読んでいる。</p>
        <p>色彩検定３級は前から持っているのだが、内容を忘れてしまったので復習している。
        ちょっと概念過ぎて応用までが遠い気もする。</p>
        <h3>なぜ勉強しているのか</h3>
        <p>《kbaba1001|/img/horse.jpg|デザインのできるエンジニアになりたい》</p>
        <p>以前から画面を作る機会は多く、デザイナーを雇う予算がない開発の現場も多いので、
        私が自分でワイヤーフレームなど書くことも多々あり、デザインを勉強したいという気持ちは以前からあった。
        というか、以前からデザインは勉強しているのだが、いまいち正解がわからず自らをデザイナーと名乗るほど
        習得できている気がしない。</p>
        <p>ある意味で、デザインは機能を作ることより独学が難しいかもしれない。
        機能は動いているかどうかという明白は指標があるけど、デザインにはそれがない。
        素人でも口を出せる部分もある一方で、専門家らしい意見が求められる場合も多いように思う。
        結局のところ、なぜそのデザインにしたのかを自分なりに一つ一つ正解を作っていく分野という気がする。</p>
        <p>一方で、単に「デザイン」という場合、出版物（チラシとか本とか）のデザインを指す場合が多いように思う。
        私にとってそういうデザインも同人誌づくりでは必要なのだが、本職であるWebシステム開発で活かすのであれば、
        やはりWebデザインについて学びたい。
        印刷物は後から動いたり画面の大きさが変わったりしないので、どうしてもWebやスマホに応用が不十分なことがあるので、
        今回は Web UI デザインに焦点を絞っている本を買ってみた（下の２冊）。</p>
        <h3>感想『縁の下のUIデザイン』</h3>
        <p>かつてWeb+DB Press で連載していたものが本になったらしい。
        Web+DB Press は廃刊になってしまったのが未だに惜しい。。。</p>
        <p>内容としては UI の小技集だがどういう意図でそのUIを使えばいいかを
        比較しながら説明してくれているのでわかりやすかった。</p>
        <p>またどのようなUIが楽しいか、という観点でもUIを考えており、
        単に利便性の話だけでなくユーザーにとって楽しいと思えるシステムを
        提供できているかというのは指標として今後も大切にしたいと思った。</p>
        <p>私のような非デザイナーにはありがたい。</p>
        <p>エンジニアがデザインを学ぶ場合、ほとんどのデザイナーよりも実装力は高い場合が多いのではなかろうか。
        どのように HTML や CSS, JS を使えばその機能を実装できるかはエンジニアの方が詳しいはずだ。
        しかし、なぜその UI にするのかという部分でエンジニアはデザイナーに劣る。</p>
        <h3>感想『UIデザイン必携』</h3>
        <p>『縁の下のUIデザイン』と色彩検定３級の中間くらいの知識をちょうど補ってくれる感じで良かった。</p>
        <p>色彩検定３級で出てくる用語、概念を、じゃあWebデザインでどのように考えるかという部分が
        イマイチ自分の中で整理できていなかったのだが、この本はそのへんをうまく説明してくれている気がする。</p>
        <p>『縁の下のUIデザイン』ほど実装に特化しておらず、でもWebやスマホを中心としたUIの話が
        まとまっており良い感じだ。</p>
        <p>この本１冊での満足感はそこまで高くないかもしれないけど、最初の写真にある４冊全て含めると
        デザインについての学習はかなりできると思う。</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 10 Sep 2024 09:08:37 GMT</pubDate>
    </item>
    <item>
      <title>React の Tips やおすすめライブラリなど</title>
      <link>https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409091131_react-tips-and-favorite-libraries/</guid>
      <content:encoded>
        <![CDATA[<p>React も使い始めて数年が経ち、自分なりの書き方も確立できてきたので Tips などをまとめてみようと思う。</p>
        <h3>React If</h3>
        <p><a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。大事なことなのでもう一度。
        <a href="https://www.npmjs.com/package/react-if">React If</a> を使ってくれ。</p>
        <p>簡単に言えば、 if 文や Switch 文を React コンポーネントで書ける。</p>
        <pre><code class="language-javascript">const Bar = ({ name, age, drinkingAge }) =&gt; (
        &lt;div&gt;
        &lt;Header /&gt;
        &lt;If condition={age &gt;= drinkingAge}&gt;
        &lt;Then&gt;
        &lt;span className=&quot;ok&quot;&gt;Have a beer, {name}!&lt;/span&gt;
        &lt;/Then&gt;
        &lt;Else&gt;
        &lt;span className=&quot;not-ok&quot;&gt;Sorry, {name}, you are not old enough.&lt;/span&gt;
        &lt;/Else&gt;
        &lt;/If&gt;
        &lt;Footer /&gt;
        &lt;/div&gt;
        );
        </code></pre>
        <p>React の読みづらさの一つが三項演算子だと思っていて、コンポーネントで書いたほうが読みやすい。
        Solidjs にこんな感じの機能があって似たようなことが React でもできないかと思って探したら React If を見つけたという経緯。</p>
        <h3>react-timer-hook</h3>
        <p>アニメーションなど時間を扱いたいケースが時々あって、
        そういう場合に <a href="https://www.npmjs.com/package/react-timer-hook?activeTab=readme">react-timer-hook</a> が
        非常に使いやすかった。</p>
        <p><code>useTimer</code> という hook を作って時間を扱うことができる。便利。</p>
        <h3>そもそも SPA でよくね？</h3>
        <p>Next.js や Remix などの SSR 系のライブラリが流行っているが、ほとんどのケースでは SPA で十分だと思う。
        SSR はサーバーサイドも一緒に管理することになり、まだまだ気楽に書けるという印象ではない。</p>
        <p>特に別途 BFF っぽい API サーバーがあるのであれば、 SPA で十分ではないかというのは検討したほうがいい。
        SSR は開発コストが高く、それを考慮しても SSR でしかパフォーマンスが出せないという場合にのみ使う方が良い。</p>
        <h3>Wouter</h3>
        <p>React または Preact において軽量なルーティングライブラリとして使えるのが <a href="https://github.com/molefrog/wouter">Wouter</a> 。</p>
        <p>SPAならこれで十分。余分な機能がない。以上。</p>
        <h3>jotai</h3>
        <p><a href="https://jotai.org/">jotai</a> は結構有名なライブラリになってしまったが、グローバルステートなどを扱うための状態管理ライブラリ。
        いわゆる <code>useContext</code> の代替。</p>
        <p>いろいろなプラグインがあって、目的に合わせて変えられるのが良い。
        私が特に気に入っているのは</p>
        <ul>
        <li><a href="https://jotai.org/docs/extensions/effect">jotai-effect</a>
        <ul>
        <li>useEffect 的なやつ</li>
        </ul>
        </li>
        <li><a href="https://jotai.org/docs/extensions/scope">jotai-scope</a>
        <ul>
        <li>jotai の atom はグローバル変数にならざるを得ないので、スコープを付けられるライブラリ</li>
        </ul>
        </li>
        </ul>
        <h3>spacetime</h3>
        <p>React とは無関係だがよく使うので <a href="https://github.com/spencermountain/spacetime">spacetime</a> も紹介する。</p>
        <p>いわゆる date-fns のような時間操作系のライブラリ。</p>
        <p>軽量、直感的な関数、機能が豊富なので気に入っている。知名度が低いのが残念だ。</p>
        <h3>ky</h3>
        <p><a href="https://www.npmjs.com/package/ky">ky</a> は <a href="https://www.npmjs.com/package/axios">axios</a> の代替ライブラリ。</p>
        <p>Denoでも使えるのが良い。</p>
        <p>正直この手のやつはあまり使う必要がない（fetchで十分）と思うのだが、たまにあると便利なので一応使っている。</p>
        <h3>Tanstack Query</h3>
        <p><a href="https://tanstack.com/query/latest">Tanstack Query</a> も有名なやつだが、 SPA 開発ではほぼ必須のライブラリ。</p>
        <p>API 通信をキャッシュしたり、データ取得中の loading status を管理したりできる超便利なやつ。</p>
        <p>リロード機能がいい感じなのが最高。</p>
        <p><a href="https://jotai.org/docs/extensions/query">jotai-tanstack-query</a> も結構頑張って使っていたのだが、
        ちょっともう一歩なところがあって結局 Tansatack Query をそのまま使うほうがよいという結論になった。</p>
        <h3>qs</h3>
        <p><a href="https://www.npmjs.com/package/qs">qs</a> もあまり React は関係ないが URL の Search Parameters をいい感じに encode/decode できるやつ。</p>
        <p>ルーティングライブラリにこの手の機能がくっついている場合もあるけど、 qs のほうが小回りがきいて便利なことが多いので、
        ルーティングは前述の Wouter くらいシンプルにしておいて qs で補うほうが好みだ。</p>
        <h3>vitest, happy-dom</h3>
        <ul>
        <li><a href="https://vitest.dev/">vitest</a></li>
        <li><a href="https://github.com/capricorn86/happy-dom">happy-dom</a></li>
        </ul>
        <p>テストライブラリ。</p>
        <p>速い。書き心地に変なクセがない。以上</p>
        <h3>Biome</h3>
        <p><a href="https://biomejs.dev/">Biome</a> は Linter と Formatter の機能を併せ持つ爆速なやつ。</p>
        <p>Biome に比べれば ESLint や Prettier は遅くて使いたくない。</p>
        <p>Biome のデフォルトのフォーマットにやや癖があるが、自分としては Linter や Formatter というのは
        「あればそれでいい」という程度のこだわりしかなく特に不満なし。</p>
        <p>色々カスタマイズしたい人は ESLint のほうがいいと思う。</p>
        <p>残念なのは対応している言語が基本的に JS/TS/JSX/TSX/JSON/JSONC のみということ。
        Markdown や CSS も対応してくれると嬉しいのだが。。。</p>
        <p>少なくとも React + Chakra UI の世界にいる限り生 CSS は書かなくてもいいので Biome で十分である。</p>
        <h3>lefthook</h3>
        <p>git hook をかきやすくするやつ。</p>
        <p>チーム開発のときに Linter / Formatter / Test あたりは必ずパスしてからコミットしてほしいという気持ちがあり、
        そういう設定を強要するために lefthook など入れてみるのだが、まぁ、だいたい抜け道を使われて徒労に終わる。。。</p>
        <h2>UI の話</h2>
        <h3>Chakra UI</h3>
        <p>最近は UI 作りは <a href="https://v2.chakra-ui.com/">Chakra UI</a> 1択と思っている。
        <a href="https://www.kuma-ui.com/">Kuma UI</a> も思想は悪くないのだが、コンポーネントが少なすぎる。</p>
        <p>Chakra UI にはだいたい使いたいコンポーネントが揃っているし、思想的にも使いやすい。</p>
        <p>Tailwind css の良いところを取り込みつつ、悪いところは排除した感じが実に良い。</p>
        <h4>ローディング UI を考える</h4>
        <p>Chakra UI にあるローディングで使えそうなコンポーネントが次。</p>
        <ul>
        <li><a href="https://v2.chakra-ui.com/docs/components/progress#animated-progress">Progress bar</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/progress-bar.gif" alt="progress-bar"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/skeleton">skeleton</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/skeleton.gif" alt="skeleton"></li>
        </ul>
        </li>
        <li><a href="https://v2.chakra-ui.com/docs/components/spinner">spinner</a>
        <ul>
        <li><img src="https://www.kbaba1001.com/img/posts/202409091131/spinner.gif" alt="spinner"></li>
        </ul>
        </li>
        </ul>
        <p>最近良く見かける UI としてロード中に Progress bar がヘッダーとかページのトップにあるやつ。
        なんとなくロード中というのがわかりやすいので導入したい。</p>
        <p>Skeleton も私としてはあまり使ってこなかったのだが、Amazonとか見てるとかなり使われている。
        ロード中なんだけど早く画面が表示されたように錯覚させる良いUIだと思う。</p>
        <p>逆に Spinner はいかにも「ロード中ですよ」という感じで、案外多用しないほうがいい気がする。
        本当にロードに時間がかかるような場合とかのみにしたほうがいいんじゃないかなぁ。</p>
        <p>こういうのは本職のデザイナーの意見も聞きたいところ。</p>
        <p><strong>(追記)</strong></p>
        <p><a href="https://www.npmjs.com/package/holy-loader">holy-loader</a> という便利なライブラリを見つけた。
        導入するだけで画面遷移の時ヘッダーにローディングUIを表示することができる。良さそう。</p>
        <h4>Chakra UI にないコンポーネントを補う</h4>
        <p>少々意外なことに Chakra UI には date-picker や select2 的なコンポーネントがない。
        正直これらは <code>&lt;input type=&quot;datetime-local&quot; &gt;</code> や <code>&lt;datalist&gt;</code> で十分なケースも多いのだが、
        もう少し機能のある UI が求められるケースもある。</p>
        <p>そういう場合には <a href="https://blueprintjs.com/">Blueprint</a> を使うようにしている。</p>
        <h3>Blueprint</h3>
        <p><a href="https://blueprintjs.com/">Blueprint</a> は業務アプリをつくるのに向いたUIを提供している。
        デザイン的に Chakra UI のポップな感じと合わないのだが、ちょうど Chakra にないコンポーネントがあるので使っている。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409091131/blueprint.png" alt="blueprint"></p>
        <h4>テーブルUIを考える</h4>
        <p>Blueprint の良い点はテーブルUIが非常によくできている。
        ドキュメントが読みづらくGitHubのサンプルコードを読むのが一番良いのだが、Excelライクなテーブルが作れる。</p>
        <p>未だに「ExcelみたいなUIが欲しいです」という要望は時々あるので Blueprint はよい。</p>
        <p><a href="https://tanstack.com/table/latest">Tanstack Table</a> と組み合わせると更に良い。
        これはテーブルのUIとデータを分けて考えることができるようになるライブラリ。
        地味に困る部分なのでしっかり作ってあって良いライブラリだと思う。
        ソートやページネーションもあるので助かる。</p>
        <h3>AutoAnimate</h3>
        <p><a href="https://auto-animate.formkit.com/">AutoAnimate</a> は一覧とかで自動的にそれっぽいアニメーションを付けてくれるライブラリ。
        一覧画面での追加、削除、移動のとき要素にちょっとアニメーションを付けてくれる。
        あんまこだわりなくそれっぽいアニメーションがほしいときにCSSとかで頑張るより楽。</p>
        <p>何度か使っているけど、 Chakra UI にも <a href="https://v2.chakra-ui.com/docs/components/transitions">Transitions</a> という
        アニメーション関係のコンポーネントがあることに気がついたのでこっちでも十分かもしれない。</p>
        <h3>その他、過去に紹介した UI ライブラリ</h3>
        <ul>
        <li><a href="https://www.kbaba1001.com/posts/202408290945_dnd-on-list">タスクリストみたいなやつを楽にDnDするやつ</a></li>
        <li><a href="https://www.kbaba1001.com/posts/202408290953_full-calendar/">カレンダーUIが必要な時使うやつ</a></li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Mon, 09 Sep 2024 11:31:14 GMT</pubDate>
    </item>
    <item>
      <title>スツールをDIYした</title>
      <link>https://www.kbaba1001.com/posts/202409021001_diy-stool/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202409021001_diy-stool/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202409021001/stool.jpg" alt="stool"></p>
        <p>タイトルの通りで上記のスツールを自作してみた。</p>
        <p>木を切って革の部分も貼った。</p>
        <h3>デザイン案</h3>
        <p><img src="https://www.kbaba1001.com/img/posts/202409021001/design1.jpg" alt="design1"></p>
        <p>はじめは上記のように１本脚で考えていたが、
        家具なども作っている大工さんに相談したところ
        柱と面の接地面積を増やした方が良いとのことで
        次のデザインになった。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202409021001/design2.jpg" alt="design2"></p>
        <p>作業工数は増えたがデザインも格好良くなり満足している。</p>
        <h3>革貼り</h3>
        <p>今回のチャレンジは革貼り。練習用に合皮を使った。
        合皮は百均で330円で売っていた。やすい。</p>
        <p>家具に革を貼るやり方についてはYoutubeで調べたが、
        やはりあまりやっている人は多くなくて、
        工場とかでソファを作っている動画を参考にした。</p>
        <p>革の裏面に接着剤をつけてかなり革を伸ばしながら貼る
        というやり方のようだ。
        革はタッカーで木材と固定した。</p>
        ]]>
      </content:encoded>
      <pubDate>Mon, 02 Sep 2024 10:01:18 GMT</pubDate>
    </item>
    <item>
      <title>カレンダーUIが必要な時使うやつ</title>
      <link>https://www.kbaba1001.com/posts/202408290953_full-calendar/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408290953_full-calendar/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://www.kbaba1001.com/img/posts/202408290953/full-calendar.png" alt="Full Calendar"></p>
        <p><a href="https://fullcalendar.io/">Full Calendar</a> を使ってくれ。</p>
        <p>React 以外にも生 JS でも使えるようにできている。最高。</p>
        <p>以上。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 29 Aug 2024 09:53:21 GMT</pubDate>
    </item>
    <item>
      <title>タスクリストみたいなやつを楽にDnDするやつ</title>
      <link>https://www.kbaba1001.com/posts/202408290945_dnd-on-list/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408290945_dnd-on-list/</guid>
      <content:encoded>
        <![CDATA[<p><img src="https://user-images.githubusercontent.com/2182637/53614150-efbed780-3c2c-11e9-9204-a5d2e746faca.gif" alt="@hello-pangea/dnd"></p>
        <p>こういうやつを React で楽にやりたい。</p>
        <p>というわけで見つけたのが <a href="https://www.npmjs.com/package/@hello-pangea/dnd">@hello-pangea/dnd</a></p>
        <p>もちろん他にも汎用的な DnD ライブラリはあったけど、リストの DnD はこれが一番楽そうだった。</p>
        <p>ただ、ドキュメントが少なすぎる。。。</p>
        <p>実質サンプルしか役に立たないので <a href="https://github.com/hello-pangea/dnd/blob/HEAD/docs/about/examples.md">これ</a> を見る。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408290945/dnd.png" alt="サンプルコード"></p>
        <p>とはいえ、３つのコンポーネント差し込むだけで簡単に DnD できるようになったので非常に良かった。
        これくらいの手間で DnD ができるなら積極的に使おうという気持ちになる。</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 29 Aug 2024 09:45:55 GMT</pubDate>
    </item>
    <item>
      <title>Ollama と Open WebUI でローカルLLMを動かす</title>
      <link>https://www.kbaba1001.com/posts/202408280721_ollama-open-web-ui/</link>
      <guid isPermaLink="false">https://www.kbaba1001.com/posts/202408280721_ollama-open-web-ui/</guid>
      <content:encoded>
        <![CDATA[<p><a href="https://github.com/kbaba1001/ollama_and_open-webui_sample">ollama_and_open-webui_sample</a></p>
        <p>こんなリポジトリを作ってみた。</p>
        <ul>
        <li><a href="https://github.com/ollama/ollama">Ollama</a>
        <ul>
        <li>いろいろな LLM モデルを同じインタフェースで動かせるようにするためのサーバー</li>
        <li>llama-cpp-python と似たようなものという理解</li>
        </ul>
        </li>
        <li><a href="https://github.com/open-webui/open-webui">open-webui</a>
        <ul>
        <li>ollama の web ui</li>
        <li>ChatGPT っぽい画面が立ち上がる</li>
        </ul>
        </li>
        <li><a href="https://huggingface.co/elyza/Llama-3-ELYZA-JP-8B-GGUF">elyza/Llama-3-ELYZA-JP-8B-GGUF</a>
        <ul>
        <li>llama 3 ベースで ELYZA が日本語対応してくれたモデル。</li>
        <li>8B なので家庭用のグラボでも動かせる（目安としては 8B なら 8GB 以上の RAM を積んだグラボ）</li>
        </ul>
        </li>
        </ul>
        <p>今までの実験から ELYZA のモデルは信用しているので Llama3 対応モデルはありがたい。</p>
        <p>動かしてみた様子はこんな感じ。</p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408280721/llama3-elyza-1.png" alt="スクショ1"></p>
        <p><img src="https://www.kbaba1001.com/img/posts/202408280721/llama3-elyza-2.png" alt="スクショ2"></p>
        <p>やはり llama2 系に比べると段違いに賢い。会話が成り立っている。</p>
        <p>画像生成っぽいことをしてほしいという無茶ぶりにもなんとか答えていていじらしい。</p>
        <p>ローカルLLMは面白いのでなんかもっと活用できないか考えたいところ。
        codellama というのもあるので vs code と組み合わせて使っても良さそう。</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 28 Aug 2024 07:21:23 GMT</pubDate>
    </item>
  </channel>
</rss>